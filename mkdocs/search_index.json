{
    "docs": [
        {
            "location": "/", 
            "text": "csvtk - a cross-platform, efficient and practical CSV/TSV toolkit\n\n\n\n\nDocuments:\n \nhttp://bioinf.shenwei.me/csvtk\n\n( \nUsage\n  and \nTutorial\n). \n\u4e2d\u6587\u4ecb\u7ecd\n\n\nSource code:\n  \nhttps://github.com/shenwei356/csvtk\n \n\n\n\n\n\n\n\n\nLatest version:\n \n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\nSimilar to FASTA/Q format in field of Bioinformatics,\nCSV/TSV formats are basic and ubiquitous file formats in both Bioinformatics and data sicence.\n\n\nPeople usually use spreadsheet softwares like MS Excel to do process table data.\nHowever it's all by clicking and typing, which is \nnot\nautomatically and time-consuming to repeat\n, especially when we want to\napply similar operations with different datasets or purposes.\n\n\nYou can also accomplish some CSV/TSV manipulations using shell commands,\nbut more codes are needed to handle the header line. Shell commands do not\nsupport selecting columns with column names either.\n\n\ncsvtk\n is \nconvenient for rapid data investigation\nand also easy to be integrated into analysis pipelines\n.\nIt could save you much time of writing Python/R scripts.\n\n\nTable of Contents\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\nSubcommands\n\n\nInstallation\n\n\nBash-completion\n\n\nCompared to \ncsvkit\n\n\nExamples\n\n\nAcknowledgements\n\n\nContact\n\n\nLicense\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nCross-platform\n (Linux/Windows/Mac OS X/OpenBSD/FreeBSD)\n\n\nLight weight and out-of-the-box, no dependencies, no compilation, no configuration\n\n\nFast\n,  \nmultiple-CPUs supported\n\n\nPractical functions supported by N subcommands\n\n\nSupport STDIN and gziped input/output file, easy being used in pipe\n\n\nMost of the subcommands support \nunselecting fields\n and \nfuzzy fields\n,\n  e.g. \n-f \"-id,-name\"\n for all fields except \"id\" and \"name\",\n  \n-F -f \"a.*\"\n for all fields with prefix \"a.\".\n\n\nSupport common plots\n (see \nusage\n)\n\n\nSeamlessly support for data with meta line (e.g., \nsep=,\n) of separator declaration used by MS Excel\n\n\n\n\nSubcommands\n\n\n28 subcommands in total.\n\n\nInformation\n\n\n\n\nheaders\n print headers\n\n\nstats\n summary of CSV file\n\n\nstats2\n summary of selected digital fields\n\n\n\n\nFormat conversion\n\n\n\n\npretty\n convert CSV to readable aligned table\n\n\ncsv2tab\n convert CSV to tabular format\n\n\ntab2csv\n convert tabular format to CSV\n\n\nspace2tab\n convert space delimited format to CSV\n\n\ntranspose\n transpose CSV data\n\n\ncsv2md\n convert CSV to markdown format\n\n\nxlsx2csv\n convert XLSX to CSV format\n\n\n\n\nSet operations\n\n\n\n\nhead\n print first N records\n\n\nsample\n sampling by proportion\n\n\ncut\n select parts of fields\n\n\nuniq\n unique data without sorting\n\n\nfreq\n frequencies of selected fields\n\n\ninter\n intersection of multiple files\n\n\ngrep\n grep data by selected fields with patterns/regular expressions\n\n\nfilter\n filter rows by values of selected fields with artithmetic expression\n\n\nfilter2\n filter rows by awk-like artithmetic/string expressions\n\n\njoin\n join multiple CSV files by selected fields\n\n\n\n\nEdit\n\n\n\n\nrename\n rename column names\n\n\nrename2\n rename column names by regular expression\n\n\nreplace\n replace data of selected fields by regular expression\n\n\nmutate\n create new columns from selected fields by regular expression\n\n\nmutate2\n create new column from selected fields by awk-like artithmetic/string expressions\n\n\ngather\n gather columns into key-value pairs\n\n\n\n\nOrdering\n\n\n\n\nsort\n sort by selected fields\n\n\n\n\nPloting\n\n\n\n\nplot\n see \nusage\n\n\nplot hist\n histogram\n\n\nplot box\n boxplot\n\n\nplot line\n line plot and scatter plot\n\n\n\n\n\n\n\n\nMisc\n\n\n\n\nversion\n   print version information and check for update\n\n\ngenautocomplete\n generate shell autocompletion script\n\n\n\n\nInstallation\n\n\nDownload Page\n\n\ncsvtk\n is implemented in \nGo\n programming language,\n executable binary files \nfor most popular operating systems\n are freely available\n  in \nrelease\n page.\n\n\nMethod 1: Download binaries\n\n\nJust \ndownload\n compressed\nexecutable file of your operating system,\nand decompress it with \ntar -zxvf *.tar.gz\n command or other tools.\nAnd then:\n\n\n\n\n\n\nFor Linux-like systems\n\n\n\n\n\n\nIf you have root privilege simply copy it to \n/usr/local/bin\n:\n\n\nsudo cp csvtk /usr/local/bin/\n\n\n\n\n\n\n\nOr add the current directory of the executable file to environment variable\n\nPATH\n:\n\n\necho export PATH=\\$PATH:\\\"$(pwd)\\\" \n ~/.bashrc\nsource ~/.bashrc\n\n\n\n\n\n\n\n\n\n\n\nFor windows\n, just copy \ncsvtk.exe\n to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nMethod 2: Install via conda \n \n \n\n\nconda install -c bioconda csvtk\n\n\n\nMethod 3: For Go developer\n\n\ngo get -u github.com/shenwei356/csvtk/csvtk\n\n\n\nBash-completion\n\n\nNote: The current version supports Bash only.\nThis should work for *nix systems with Bash installed.\n\n\nHowto:\n\n\n\n\n\n\nrun: \ncsvtk genautocomplete\n\n\n\n\n\n\ncreate and edit \n~/.bash_completion\n file if you don't have it.\n\n\nnano ~/.bash_completion\n\n\n\nadd the following:\n\n\nfor bcfile in ~/.bash_completion.d/* ; do\n  . $bcfile\ndone\n\n\n\n\n\n\n\nCompared to \ncsvkit\n\n\ncsvkit\n\n\n\n\n\n\n\n\nFeatures\n\n\ncsvtk\n\n\ncsvkit\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nRead    Gzip\n\n\nYes\n\n\nYes\n\n\nread gzip files\n\n\n\n\n\n\nFields ranges\n\n\nYes\n\n\nYes\n\n\ne.g. \n-f 1-4,6\n\n\n\n\n\n\nUnselect fileds\n\n\nYes\n\n\n--\n\n\ne.g. \n-1\n for excluding first column\n\n\n\n\n\n\nFuzzy fields\n\n\nYes\n\n\n--\n\n\ne.g. \nab*\n for columns with name prefix \"ab\"\n\n\n\n\n\n\nReorder fields\n\n\nYes\n\n\nYes\n\n\nit means \n-f 1,2\n is different from \n-f 2,1\n\n\n\n\n\n\nRename columns\n\n\nYes\n\n\n--\n\n\nrename with new name(s) or from existed names\n\n\n\n\n\n\nSort by multiple keys\n\n\nYes\n\n\nYes\n\n\nbash sort like operations\n\n\n\n\n\n\nSort by number\n\n\nYes\n\n\n--\n\n\ne.g. \n-k 1:n\n\n\n\n\n\n\nMultiple sort\n\n\nYes\n\n\n--\n\n\ne.g. \n-k 2:r -k 1:nr\n\n\n\n\n\n\nPretty output\n\n\nYes\n\n\nYes\n\n\nconvert CSV to readable aligned table\n\n\n\n\n\n\nUnique data\n\n\nYes\n\n\n--\n\n\nunique data of selected fields\n\n\n\n\n\n\nfrequency\n\n\nYes\n\n\n--\n\n\nfrequencies of selected fields\n\n\n\n\n\n\nSampling\n\n\nYes\n\n\n--\n\n\nsampling by proportion\n\n\n\n\n\n\nMutate fields\n\n\nYes\n\n\n--\n\n\ncreate new columns from selected fields\n\n\n\n\n\n\nRepalce\n\n\nYes\n\n\n--\n\n\nreplace data of selected fields\n\n\n\n\n\n\n\n\nSimilar tools:\n\n\n\n\ncsvkit\n - A suite of utilities for converting to and working with CSV, the king of tabular file formats. http://csvkit.rtfd.org/\n\n\nxsv\n - A fast CSV toolkit written in Rust.\n\n\nmiller\n - Miller is like sed, awk, cut, join, and sort for\nname-indexed data such as CSV and tabular JSON http://johnkerl.org/miller\n\n\ntsv-utils-dlang\n - Command line utilities for tab-separated value files written in the D programming language.\n\n\n\n\nExamples\n\n\nMore \nexamples\n and \ntutorial\n.\n\n\nAttention\n\n\n\n\nThe CSV parser requires all the lines have same number of fields/columns.\n    Even lines with spaces will cause error.\n\n\nBy default, csvtk thinks your files have header row, if not, switch flag \n-H\n on.\n\n\nColumn names better be unique.\n\n\nBy default, lines starting with \n#\n will be ignored, if the header row\n    starts with \n#\n, please assign flag \n-C\n another rare symbol, e.g. \n'$'\n.\n\n\nBy default, csvtk handles CSV files, use flag \n-t\n for tab-delimited files.\n\n\nIf \n\"\n exists in tab-delimited files, use flag \n-l\n.\n\n\n\n\nExamples\n\n\n\n\n\n\nPretty result\n\n\n$ csvtk pretty names.csv\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n\n\n\n\n\n\nSummary of selected digital fields: num, sum, min, max, mean, stdev (\nstat2\n)\n\n\n$ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk stat2 -t -H -f 1-3\nfield   num     sum   min     max     mean    stdev\n1         4      20     1       8        5     3.16\n2         4   1,015     2   1,000   253.75   497.51\n3         4      13     0       6     3.25      2.5\n\n\n\n\n\n\n\nSelect fields/columns (\ncut\n)\n\n\n\n\nBy index: \ncsvtk cut -f 1,2\n\n\nBy names: \ncsvtk cut -f first_name,username\n\n\nUnselect\n: \ncsvtk cut -f -1,-2\n or \ncsvtk cut -f -first_name\n\n\nFuzzy fields\n: \ncsvtk cut -F -f \"*_name,username\"\n\n\nField ranges: \ncsvtk cut -f 2-4\n for column 2,3,4 or \ncsvtk cut -f -3--1\n for discarding column 1,2,3\n\n\nAll fields: \ncsvtk cut -F -f \"*\"\n\n\n\n\n\n\n\n\nSearch by selected fields (\ngrep\n) (matched parts will be highlighted as red)\n\n\n\n\nBy exactly matching: \ncsvtk grep -f first_name -p Robert -p Rob\n\n\nBy regular expression: \ncsvtk grep -f first_name -r -p Rob\n\n\nBy pattern list: \ncsvtk grep -f first_name -P name_list.txt\n\n\nRemore rows containing missing data (NA): \ncsvtk grep -F -f \"*\" -r -p \"^$\" -v\n\n\n\n\n\n\n\n\nRename column names\n (\nrename\n and \nrename2\n)\n\n\n\n\nSetting new names: \ncsvtk rename -f A,B -n a,b\n or \ncsvtk rename -f 1-3 -n a,b,c\n\n\nReplacing with original names by regular express: \ncat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'\n for adding prefix to all column names.\n\n\n\n\n\n\n\n\nEdit data with regular expression\n (\nreplace\n)\n\n\n\n\nRemove Chinese charactors:  \ncsvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"\n\n\n\n\n\n\n\n\nCreate new column from selected fields by regular expression\n (\nmutate\n)\n\n\n\n\nIn default, copy a column: \ncsvtk mutate -f id\n\n\nExtract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n  \ncsvtk mutate -f sample -n group -p \"^(.+?)\\.\"\n\n\n\n\n\n\n\n\nSort by multiple keys (\nsort\n)\n\n\n\n\nBy single column : \ncsvtk sort -k 1\n or \ncsvtk sort -k last_name\n\n\nBy multiple columns: \ncsvtk sort -k 1,2\n or \ncsvtk sort -k 1 -k 2\n or \ncsvtk sort -k last_name,age\n\n\nSort by number: \ncsvtk sort -k 1:n\n or  \ncsvtk sort -k 1:nr\n for reverse number\n\n\nComplex sort: \ncsvtk sort -k region -k age:n -k id:nr\n\n\n\n\n\n\n\n\nJoin multiple files by keys\n (\njoin\n)\n\n\n\n\nAll files have same key column: \ncsvtk join -f id file1.csv file2.csv\n\n\nFiles have different key columns: \ncsvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k\n\n\n\n\n\n\n\n\nFilter by numbers (\nfilter\n)\n\n\n\n\nSingle field: \ncsvtk filter -f \"id\n0\"\n\n\nMultiple fields\n: \ncsvtk filter -f \"1-3\n0\"\n\n\nUsing \n--any\n to print record if any of the field satisfy the condition: \ncsvtk filter -f \"1-3\n0\" --any\n\n\nfuzzy fields\n: \ncsvtk filter -F -f \"A*!=0\"\n\n\n\n\n\n\n\n\nFilter rows by awk-like artithmetic/string expressions\n (\nfilter2\n)\n\n\n\n\nUsing field index: \ncsvtk filter2 -f '$3\n0'\n\n\nUsing column names: \ncsvtk filter2 -f '$id \n 0'\n\n\nBoth artithmetic and string expressions: \ncsvtk filter2 -f '$id \n 3 || $username==\"ken\"'\n\n\nMore complicated: \ncsvtk filter2 -H -t -f '$1 \n 2 \n $2 % 2 == 0'\n\n\n\n\n\n\n\n\nPloting\n\n\n\n\nplot histogram with data of the second column:\n \ncsvtk -t plot hist testdata/grouped_data.tsv.gz -f 2 | display\n\n\n\n\nplot boxplot with data of the \"GC Content\" (third) column,\ngroup information is the \"Group\" column.\n\ncsvtk -t plot box testdata/grouped_data.tsv.gz -g \"Group\" -f \"GC Content\" --width 3 | display\n\n\n\n\nplot horiz boxplot with data of the \"Length\" (second) column,\ngroup information is the \"Group\" column.\n\ncsvtk -t plot box testdata/grouped_data.tsv.gz -g \"Group\" -f \"Length\"  --height 3 --width 5 --horiz --title \"Horiz box plot\" | display\n\n\n\n\nplot line plot with X-Y data\n\ncsvtk -t plot line testdata/xy.tsv -x X -y Y -g Group | display\n\n\n\n\nplot scatter plot with X-Y data\n\ncsvtk -t plot line testdata/xy.tsv -x X -y Y -g Group --scatter | display\n\n\n\n\n\n\n\n\n\n\nAcknowledgements\n\n\nWe are grateful to \nZhiluo Deng\n and\n\nLi Peng\n for suggesting features and reporting bugs.\n\n\nContact\n\n\ncreate an issue\n to report bugs,\npropose new functions or ask for help.\n\n\nOr \nleave a comment\n.\n\n\nLicense\n\n\nMIT License", 
            "title": "Home"
        }, 
        {
            "location": "/#csvtk-a-cross-platform-efficient-and-practical-csvtsv-toolkit", 
            "text": "Documents:   http://bioinf.shenwei.me/csvtk \n(  Usage   and  Tutorial ).  \u4e2d\u6587\u4ecb\u7ecd  Source code:    https://github.com/shenwei356/csvtk       Latest version:", 
            "title": "csvtk - a cross-platform, efficient and practical CSV/TSV toolkit"
        }, 
        {
            "location": "/#introduction", 
            "text": "Similar to FASTA/Q format in field of Bioinformatics,\nCSV/TSV formats are basic and ubiquitous file formats in both Bioinformatics and data sicence.  People usually use spreadsheet softwares like MS Excel to do process table data.\nHowever it's all by clicking and typing, which is  not\nautomatically and time-consuming to repeat , especially when we want to\napply similar operations with different datasets or purposes.  You can also accomplish some CSV/TSV manipulations using shell commands,\nbut more codes are needed to handle the header line. Shell commands do not\nsupport selecting columns with column names either.  csvtk  is  convenient for rapid data investigation\nand also easy to be integrated into analysis pipelines .\nIt could save you much time of writing Python/R scripts.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "Features  Subcommands  Installation  Bash-completion  Compared to  csvkit  Examples  Acknowledgements  Contact  License", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/#features", 
            "text": "Cross-platform  (Linux/Windows/Mac OS X/OpenBSD/FreeBSD)  Light weight and out-of-the-box, no dependencies, no compilation, no configuration  Fast ,   multiple-CPUs supported  Practical functions supported by N subcommands  Support STDIN and gziped input/output file, easy being used in pipe  Most of the subcommands support  unselecting fields  and  fuzzy fields ,\n  e.g.  -f \"-id,-name\"  for all fields except \"id\" and \"name\",\n   -F -f \"a.*\"  for all fields with prefix \"a.\".  Support common plots  (see  usage )  Seamlessly support for data with meta line (e.g.,  sep=, ) of separator declaration used by MS Excel", 
            "title": "Features"
        }, 
        {
            "location": "/#subcommands", 
            "text": "28 subcommands in total.  Information   headers  print headers  stats  summary of CSV file  stats2  summary of selected digital fields   Format conversion   pretty  convert CSV to readable aligned table  csv2tab  convert CSV to tabular format  tab2csv  convert tabular format to CSV  space2tab  convert space delimited format to CSV  transpose  transpose CSV data  csv2md  convert CSV to markdown format  xlsx2csv  convert XLSX to CSV format   Set operations   head  print first N records  sample  sampling by proportion  cut  select parts of fields  uniq  unique data without sorting  freq  frequencies of selected fields  inter  intersection of multiple files  grep  grep data by selected fields with patterns/regular expressions  filter  filter rows by values of selected fields with artithmetic expression  filter2  filter rows by awk-like artithmetic/string expressions  join  join multiple CSV files by selected fields   Edit   rename  rename column names  rename2  rename column names by regular expression  replace  replace data of selected fields by regular expression  mutate  create new columns from selected fields by regular expression  mutate2  create new column from selected fields by awk-like artithmetic/string expressions  gather  gather columns into key-value pairs   Ordering   sort  sort by selected fields   Ploting   plot  see  usage  plot hist  histogram  plot box  boxplot  plot line  line plot and scatter plot     Misc   version    print version information and check for update  genautocomplete  generate shell autocompletion script", 
            "title": "Subcommands"
        }, 
        {
            "location": "/#installation", 
            "text": "Download Page  csvtk  is implemented in  Go  programming language,\n executable binary files  for most popular operating systems  are freely available\n  in  release  page.", 
            "title": "Installation"
        }, 
        {
            "location": "/#method-1-download-binaries", 
            "text": "Just  download  compressed\nexecutable file of your operating system,\nand decompress it with  tar -zxvf *.tar.gz  command or other tools.\nAnd then:    For Linux-like systems    If you have root privilege simply copy it to  /usr/local/bin :  sudo cp csvtk /usr/local/bin/    Or add the current directory of the executable file to environment variable PATH :  echo export PATH=\\$PATH:\\\"$(pwd)\\\"   ~/.bashrc\nsource ~/.bashrc      For windows , just copy  csvtk.exe  to  C:\\WINDOWS\\system32 .", 
            "title": "Method 1: Download binaries"
        }, 
        {
            "location": "/#method-2-install-via-conda", 
            "text": "conda install -c bioconda csvtk", 
            "title": "Method 2: Install via conda"
        }, 
        {
            "location": "/#method-3-for-go-developer", 
            "text": "go get -u github.com/shenwei356/csvtk/csvtk", 
            "title": "Method 3: For Go developer"
        }, 
        {
            "location": "/#bash-completion", 
            "text": "Note: The current version supports Bash only.\nThis should work for *nix systems with Bash installed.  Howto:    run:  csvtk genautocomplete    create and edit  ~/.bash_completion  file if you don't have it.  nano ~/.bash_completion  add the following:  for bcfile in ~/.bash_completion.d/* ; do\n  . $bcfile\ndone", 
            "title": "Bash-completion"
        }, 
        {
            "location": "/#compared-to-csvkit", 
            "text": "csvkit     Features  csvtk  csvkit  Note      Read    Gzip  Yes  Yes  read gzip files    Fields ranges  Yes  Yes  e.g.  -f 1-4,6    Unselect fileds  Yes  --  e.g.  -1  for excluding first column    Fuzzy fields  Yes  --  e.g.  ab*  for columns with name prefix \"ab\"    Reorder fields  Yes  Yes  it means  -f 1,2  is different from  -f 2,1    Rename columns  Yes  --  rename with new name(s) or from existed names    Sort by multiple keys  Yes  Yes  bash sort like operations    Sort by number  Yes  --  e.g.  -k 1:n    Multiple sort  Yes  --  e.g.  -k 2:r -k 1:nr    Pretty output  Yes  Yes  convert CSV to readable aligned table    Unique data  Yes  --  unique data of selected fields    frequency  Yes  --  frequencies of selected fields    Sampling  Yes  --  sampling by proportion    Mutate fields  Yes  --  create new columns from selected fields    Repalce  Yes  --  replace data of selected fields     Similar tools:   csvkit  - A suite of utilities for converting to and working with CSV, the king of tabular file formats. http://csvkit.rtfd.org/  xsv  - A fast CSV toolkit written in Rust.  miller  - Miller is like sed, awk, cut, join, and sort for\nname-indexed data such as CSV and tabular JSON http://johnkerl.org/miller  tsv-utils-dlang  - Command line utilities for tab-separated value files written in the D programming language.", 
            "title": "Compared to csvkit"
        }, 
        {
            "location": "/#examples", 
            "text": "More  examples  and  tutorial .  Attention   The CSV parser requires all the lines have same number of fields/columns.\n    Even lines with spaces will cause error.  By default, csvtk thinks your files have header row, if not, switch flag  -H  on.  Column names better be unique.  By default, lines starting with  #  will be ignored, if the header row\n    starts with  # , please assign flag  -C  another rare symbol, e.g.  '$' .  By default, csvtk handles CSV files, use flag  -t  for tab-delimited files.  If  \"  exists in tab-delimited files, use flag  -l .   Examples    Pretty result  $ csvtk pretty names.csv\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123    Summary of selected digital fields: num, sum, min, max, mean, stdev ( stat2 )  $ cat digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat digitals.tsv | csvtk stat2 -t -H -f 1-3\nfield   num     sum   min     max     mean    stdev\n1         4      20     1       8        5     3.16\n2         4   1,015     2   1,000   253.75   497.51\n3         4      13     0       6     3.25      2.5    Select fields/columns ( cut )   By index:  csvtk cut -f 1,2  By names:  csvtk cut -f first_name,username  Unselect :  csvtk cut -f -1,-2  or  csvtk cut -f -first_name  Fuzzy fields :  csvtk cut -F -f \"*_name,username\"  Field ranges:  csvtk cut -f 2-4  for column 2,3,4 or  csvtk cut -f -3--1  for discarding column 1,2,3  All fields:  csvtk cut -F -f \"*\"     Search by selected fields ( grep ) (matched parts will be highlighted as red)   By exactly matching:  csvtk grep -f first_name -p Robert -p Rob  By regular expression:  csvtk grep -f first_name -r -p Rob  By pattern list:  csvtk grep -f first_name -P name_list.txt  Remore rows containing missing data (NA):  csvtk grep -F -f \"*\" -r -p \"^$\" -v     Rename column names  ( rename  and  rename2 )   Setting new names:  csvtk rename -f A,B -n a,b  or  csvtk rename -f 1-3 -n a,b,c  Replacing with original names by regular express:  cat ../testdata/c.csv | ./csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'  for adding prefix to all column names.     Edit data with regular expression  ( replace )   Remove Chinese charactors:   csvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"     Create new column from selected fields by regular expression  ( mutate )   In default, copy a column:  csvtk mutate -f id  Extract prefix of data as group name (get \"A\" from \"A.1\" as group name):\n   csvtk mutate -f sample -n group -p \"^(.+?)\\.\"     Sort by multiple keys ( sort )   By single column :  csvtk sort -k 1  or  csvtk sort -k last_name  By multiple columns:  csvtk sort -k 1,2  or  csvtk sort -k 1 -k 2  or  csvtk sort -k last_name,age  Sort by number:  csvtk sort -k 1:n  or   csvtk sort -k 1:nr  for reverse number  Complex sort:  csvtk sort -k region -k age:n -k id:nr     Join multiple files by keys  ( join )   All files have same key column:  csvtk join -f id file1.csv file2.csv  Files have different key columns:  csvtk join -f \"username;username;name\" names.csv phone.csv adress.csv -k     Filter by numbers ( filter )   Single field:  csvtk filter -f \"id 0\"  Multiple fields :  csvtk filter -f \"1-3 0\"  Using  --any  to print record if any of the field satisfy the condition:  csvtk filter -f \"1-3 0\" --any  fuzzy fields :  csvtk filter -F -f \"A*!=0\"     Filter rows by awk-like artithmetic/string expressions  ( filter2 )   Using field index:  csvtk filter2 -f '$3 0'  Using column names:  csvtk filter2 -f '$id   0'  Both artithmetic and string expressions:  csvtk filter2 -f '$id   3 || $username==\"ken\"'  More complicated:  csvtk filter2 -H -t -f '$1   2   $2 % 2 == 0'     Ploting   plot histogram with data of the second column:\n  csvtk -t plot hist testdata/grouped_data.tsv.gz -f 2 | display   plot boxplot with data of the \"GC Content\" (third) column,\ngroup information is the \"Group\" column. csvtk -t plot box testdata/grouped_data.tsv.gz -g \"Group\" -f \"GC Content\" --width 3 | display   plot horiz boxplot with data of the \"Length\" (second) column,\ngroup information is the \"Group\" column. csvtk -t plot box testdata/grouped_data.tsv.gz -g \"Group\" -f \"Length\"  --height 3 --width 5 --horiz --title \"Horiz box plot\" | display   plot line plot with X-Y data csvtk -t plot line testdata/xy.tsv -x X -y Y -g Group | display   plot scatter plot with X-Y data csvtk -t plot line testdata/xy.tsv -x X -y Y -g Group --scatter | display", 
            "title": "Examples"
        }, 
        {
            "location": "/#acknowledgements", 
            "text": "We are grateful to  Zhiluo Deng  and Li Peng  for suggesting features and reporting bugs.", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/#contact", 
            "text": "create an issue  to report bugs,\npropose new functions or ask for help.  Or  leave a comment .", 
            "title": "Contact"
        }, 
        {
            "location": "/#license", 
            "text": "MIT License", 
            "title": "License"
        }, 
        {
            "location": "/download/", 
            "text": "Download\n\n\ncsvtk\n is implemented in \nGo\n programming language,\n executable binary files \nfor most popular operating system\n are freely available\n  in \nrelease\n page.\n\n\nCurrent Version\n\n\ncsvtk v0.10.0\n\n\n\n\n\n\nadd subcommand \nxlsx2csv\n to convert XLSX to CSV format\n\n\ngrep\n, \nfilter\n, \nfilter2\n: add flag \n-n/--line-number\n to print line-number as the first column\n\n\ncut\n: add flag \n-i/--ignore-case\n to ignore case of column name\n\n\n\n\nLinks:\n\n\nTips\n\n\n\n\nrun \ncsvtk version\n to check update !!!\n\n\nrun \ncsvtk genautocomplete\n to update Bash completion !!!\n\n\n\n\n\n\n\n\n\n\nOS\n\n\nArch\n\n\nFile, (mirror\u4e3a\u4e2d\u56fd\u7528\u6237\u4e0b\u8f7d\u955c\u50cf\u94fe\u63a5)\n\n\nDownload Count\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n32-bit\n\n\ncsvtk_linux_386.tar.gz\n, (\nmirror\n)\n\n\n\n\n\n\n\n\nLinux\n\n\n64-bit\n\n\ncsvtk_linux_amd64.tar.gz\n, (\nmirror\n)\n\n\n\n\n\n\n\n\nOS X\n\n\n32-bit\n\n\ncsvtk_darwin_386.tar.gz\n, (\nmirror\n)\n\n\n\n\n\n\n\n\nOS X\n\n\n64-bit\n\n\ncsvtk_darwin_amd64.tar.gz\n, (\nmirror\n)\n\n\n\n\n\n\n\n\nWindows\n\n\n32-bit\n\n\ncsvtk_windows_386.exe.tar.gz\n, (\nmirror\n)\n\n\n\n\n\n\n\n\nWindows\n\n\n64-bit\n\n\ncsvtk_windows_amd64.exe.tar.gz\n, (\nmirror\n)\n\n\n\n\n\n\n\n\n\n\nInstallation\n\n\nDownload Page\n\n\ncsvtk\n is implemented in \nGo\n programming language,\n executable binary files \nfor most popular operating systems\n are freely available\n  in \nrelease\n page.\n\n\nMethod 1: Download binaries\n\n\nJust \ndownload\n compressed\nexecutable file of your operating system,\nand decompress it with \ntar -zxvf *.tar.gz\n command or other tools.\nAnd then:\n\n\n\n\n\n\nFor Linux-like systems\n\n\n\n\n\n\nIf you have root privilege simply copy it to \n/usr/local/bin\n:\n\n\nsudo cp csvtk /usr/local/bin/\n\n\n\n\n\n\n\nOr add the current directory of the executable file to environment variable\n\nPATH\n:\n\n\necho export PATH=\\$PATH:\\\"$(pwd)\\\" \n ~/.bashrc\nsource ~/.bashrc\n\n\n\n\n\n\n\n\n\n\n\nFor windows\n, just copy \ncsvtk.exe\n to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nMethod 2: Install via conda \n \n \n\n\nconda install -c bioconda csvtk\n\n\n\nMethod 3: For Go developer\n\n\ngo get -u github.com/shenwei356/csvtk/csvtk\n\n\n\nBash-completion\n\n\nNote: The current version supports Bash only.\nThis should work for *nix systems with Bash installed.\n\n\nHowto:\n\n\n\n\n\n\nrun: \ncsvtk genautocomplete\n\n\n\n\n\n\ncreate and edit \n~/.bash_completion\n file if you don't have it.\n\n\nnano ~/.bash_completion\n\n\n\nadd the following:\n\n\nfor bcfile in ~/.bash_completion.d/* ; do\n  . $bcfile\ndone\n\n\n\n\n\n\n\nPrevious Versions\n\n\n\n\ncsvtk v0.9.1\n\n\n\n\ncsvtk replace\n: fix bug when replacing with key-value pairs brought in v0.8.0\n\n\n\n\n\n\ncsvtk v0.9.0\n\n\n\n\nadd subcommand \ncsvtk mutate2\n: create new column from selected fields by \nawk-like artithmetic/string expressions\n\n\nadd new command \ngenautocomplete\n to generate \nshell autocompletion\n script!\n\n\n\n\n\n\ncsvtk v0.8.0\n\n\n\n\nnew command \ncsvtk gather\n for gathering columns into key-value pairs\n.\n\n\ncsvtk sort\n: support \nsorting by user-defined order\n.\n\n\nfix bug of \nunselecting field\n: wrongly reporting error of fields not existing.\naffected commands: \ncut\n, \nfilter\n, \nfitler2\n, \nfreq\n, \ngrep\n, \ninter\n, \nmutate\n,\n\nrename\n, \nrename2\n, \nreplace\n, \nstats2\n, \nuniq\n.\n\n\nupdate help message of flag \n-F/--fuzzy-fields\n.\n\n\nupdate help message of global flag \n-t\n, which overrides both \n-d\n and \n-D\n.\n  If you want other delimiter for tabular input, use \n-t $'\\t' -D \"delimiter\"\n.\n\n\n\n\n\n\ncsvtk v0.7.1\n\n\n\n\ncsvtk plot box\n and \ncsvtk plot line\n: fix bugs for special cases of input\n\n\ncompile with go1.8.1\n\n\n\n\n\n\ncsvtk v0.7.0\n\n\n\n\nfig bug of \"stricter field checking\" in v0.6.0 and v0.6.1 when using flag \n-F/--fuzzy-fields\n\n\ncsvtk pretty\n and \ncsvtk csv2md\n: add attention that\n  these commands treat the first row as header line and require them to be unique.\n\n\ncsvtk stat\n renamed to \ncsvtk stats\n, old name is still available as an alias.\n\n\ncsvtk stat2\n renamed to \ncsvtk stats2\n, old name is still available as an alias.\n\n\nissues/13\n \nseamlessly support for data with meta line of separator declaration used by MS Excel\n.\n\n\n\n\n\n\ncsvtk v0.6.1\n\n\n\n\ncsvtk cut\n: minor bug: panic when no fields given. i.e., \ncsvtk cut\n.\nAll relevant commands have been fixed.\n\n\n\n\n\n\ncsvtk v0.6.0\n\n\n\n\ncsvtk grep\n: \nlarge performance improvement by discarding goroutine\n (multiple threads),\n  and \nkeeping output in order of input\n.\n\n\nBetter column name checking and \nstricter field checking,\n  fields out of range are not ignored now\n.\n  Affected commands include \ncut\n, \nfilter\n, \nfreq\n, \ngrep\n, \ninter\n, \nmutate\n,\n  \nrename\n, \nrename2\n, \nreplace\n, \nstat2\n, and \nuniq\n.\n\n\nNew command: \ncsvtk filter2\n, filtering rows by artithmetic/string expressions like \nawk\n.\n\n\n\n\n\n\ncsvtk v0.5.0\n\n\n\n\ncsvtk cut\n: delete flag \n-n/--names\n, move it to a new command \ncsvtk headers\n\n\nnew command: \ncsvtk headers\n\n\nnew command: \ncsvtk head\n\n\nnew command: \ncsvtk sample\n\n\n\n\n\n\ncsvtk v0.4.6\n\n\n\n\ncsvtk grep\n: fix result highlight when flag \n-v\n is on.\n\n\n\n\n\n\ncsvtk v0.4.5\n\n\n\n\ncsvtk join\n: support the 2nd or later files with entries with same ID.\n\n\n\n\n\n\ncsvtk v0.4.4\n\n\n\n\nadd command \ncsvtk freq\n: frequencies of selected fields\n\n\nadd lots of examples in \nusage page\n\n\n\n\n\n\ncsvtk v0.4.3\n\n\n\n\nimprovement of using experience: flag \n-n\n is not required anymore when flag \n-H\n in \ncsvtk mutate\n\n\n\n\n\n\ncsvtk v0.4.2\n\n\n\n\nfix highlight bug of \ncsvtk grep\n: if the pattern matches multiple parts,\nthe text will be wrongly edited.\n\n\nchanges: disable highlight when pattern file given.\n\n\nchange the default output of all ploting commands to STDOUT, now you can\npipe the image to \"display\" command of Imagemagic.\n\n\n\n\n\n\ncsvtk v0.4.1\n\n\n\n\nNothing changed. Just fix the links due to inappropriate deployment of v0.4.0\n\n\n\n\n\n\ncsvtk v0.4.0\n\n\n\n\nadd flag for \ncsvtk replace\n: \n-K\n (\n--keep-key\n) keep the key as value when\nno value found for the key. This is open in default in previous versions.\n\n\n\n\n\n\ncsvtk v0.3.9\n\n  \n\n\nfix bug: header row incomplete in \ncsvtk sort\n result\n\n\n\n\n\n\ncsvtk v0.3.8.1\n\n  \n\n\nfix bug of flag parsing library \npflag\n,\n\ndetail\n.\nThe bug affected the \ncsvtk grep -r -p\n, when value of \n-p\n contain \"[\" and \"]\"\nat the beginning or end, they are wrongly parsed.\n\n\n\n\n\n\ncsvtk v0.3.8\n\n  \n\n\nnew feature: \ncsvtk cut\n supports ordered fields output. e.g., \ncsvtk cut -f 2,1\n\n  outputs the 2nd column in front of 1th column.\n\n\nnew commands: \ncsvtk plot\n can plot three types of plots by subcommands:\n\n\ncsvtk plot hist\n: histogram\n\n\ncsvtk plot box\n: boxplot\n\n\ncsvtk plot line\n: line plot and scatter plot\n\n\n\n\n\n\n\n\n\n\ncsvtk v0.3.7\n\n  \n\n\nfix a serious bug of using negative field of column name, e.g. \n-f \"-id\"\n\n\n\n\n\n\ncsvtk v0.3.6\n\n  \n\n\ncsvtk replace\n support replacement symbols \n{nr}\n (record number)\n  and \n{kv}\n (corresponding value of the key ($1) by key-value file)\n\n\n\n\n\n\ncsvtk v0.3.5.2\n\n  \n\n\nadd flag \n--fill\n for \ncsvtk join\n, so we can fill the unmatched data\n\n\nfix typo\n\n\n\n\n\n\ncsvtk v0.3.5.1\n\n  \n\n\nfix minor bug of reading lines ending with \n\\r\\n\n from a dependency package\n\n\n\n\n\n\ncsvtk v0.3.5\n\n  \n\n\nfix minor bug of \ncsv2md\n\n\nadd subcommand \nversion\n which could check for update\n\n\n\n\n\n\ncsvtk v0.3.4\n\n  \n\n\nfix bug of \ncsvtk replace\n that head row should not be edited.\n\n\n\n\n\n\ncsvtk v0.3.3\n\n  \n\n\nfix bug of \ncsvtk grep -t -P\n\n\n\n\n\n\ncsvtk v0.3.2\n\n  \n\n\nfix bug of \ninter\n\n\n\n\n\n\ncsvtk v0.3.1\n\n  \n\n\nadd support of search multiple fields for \ngrep\n\n\n\n\n\n\ncsvtk v0.3\n\n  \n\n\nadd subcommand \ncsv2md\n\n\n\n\n\n\ncsvtk v0.2.9\n\n  \n\n\nadd more flags to subcommand \npretty\n\n\nfix bug of \ncsvtk cut -n\n\n\nadd subcommand \nfilter\n\n\n\n\n\n\ncsvtk v0.2.8\n\n  \n\n\nadd subcommand \npretty\n -- convert CSV to readable aligned table\n\n\n\n\n\n\ncsvtk v0.2.7\n\n  \n\n\nfix highlight failing in windows\n\n\n\n\n\n\ncsvtk v0.2.6\n\n  \n\n\nfix one error message of \ngrep\n\n\nhighlight matched fields in result of \ngrep\n\n\n\n\n\n\ncsvtk v0.2.5\n\n  \n\n\nfix bug of \nstat\n that failed to considerate files with header row\n\n\nadd subcommand \nstat2\n - summary of selected number fields\n\n\nmake the output of \nstat\n prettier\n\n\n\n\n\n\ncsvtk v0.2.4\n\n  \n\n\nfix bug of handling comment lines\n\n\nadd some notes before using csvtk\n\n\n\n\n\n\ncsvtk v0.2.3\n\n  \n\n\nadd flag \n--colnames\n to \ncut\n\n\nflag \n-f\n (\n--fields\n) of \njoin\n supports single value now\n\n\n\n\n\n\ncsvtk v0.2.2\n\n  \n\n\nadd flag \n--keep-unmathed\n to \njoin\n\n\n\n\n\n\ncsvtk v0.2\n\n  \n\n\nfinish almost functions\n\n\n\n\n\n\ncsvtk v0.2.1\n\n  \n\n\nfix bug of \nmutate\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#download", 
            "text": "csvtk  is implemented in  Go  programming language,\n executable binary files  for most popular operating system  are freely available\n  in  release  page.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#current-version", 
            "text": "csvtk v0.10.0    add subcommand  xlsx2csv  to convert XLSX to CSV format  grep ,  filter ,  filter2 : add flag  -n/--line-number  to print line-number as the first column  cut : add flag  -i/--ignore-case  to ignore case of column name   Links:  Tips   run  csvtk version  to check update !!!  run  csvtk genautocomplete  to update Bash completion !!!      OS  Arch  File, (mirror\u4e3a\u4e2d\u56fd\u7528\u6237\u4e0b\u8f7d\u955c\u50cf\u94fe\u63a5)  Download Count      Linux  32-bit  csvtk_linux_386.tar.gz , ( mirror )     Linux  64-bit  csvtk_linux_amd64.tar.gz , ( mirror )     OS X  32-bit  csvtk_darwin_386.tar.gz , ( mirror )     OS X  64-bit  csvtk_darwin_amd64.tar.gz , ( mirror )     Windows  32-bit  csvtk_windows_386.exe.tar.gz , ( mirror )     Windows  64-bit  csvtk_windows_amd64.exe.tar.gz , ( mirror )", 
            "title": "Current Version"
        }, 
        {
            "location": "/download/#installation", 
            "text": "Download Page  csvtk  is implemented in  Go  programming language,\n executable binary files  for most popular operating systems  are freely available\n  in  release  page.", 
            "title": "Installation"
        }, 
        {
            "location": "/download/#method-1-download-binaries", 
            "text": "Just  download  compressed\nexecutable file of your operating system,\nand decompress it with  tar -zxvf *.tar.gz  command or other tools.\nAnd then:    For Linux-like systems    If you have root privilege simply copy it to  /usr/local/bin :  sudo cp csvtk /usr/local/bin/    Or add the current directory of the executable file to environment variable PATH :  echo export PATH=\\$PATH:\\\"$(pwd)\\\"   ~/.bashrc\nsource ~/.bashrc      For windows , just copy  csvtk.exe  to  C:\\WINDOWS\\system32 .", 
            "title": "Method 1: Download binaries"
        }, 
        {
            "location": "/download/#method-2-install-via-conda", 
            "text": "conda install -c bioconda csvtk", 
            "title": "Method 2: Install via conda"
        }, 
        {
            "location": "/download/#method-3-for-go-developer", 
            "text": "go get -u github.com/shenwei356/csvtk/csvtk", 
            "title": "Method 3: For Go developer"
        }, 
        {
            "location": "/download/#bash-completion", 
            "text": "Note: The current version supports Bash only.\nThis should work for *nix systems with Bash installed.  Howto:    run:  csvtk genautocomplete    create and edit  ~/.bash_completion  file if you don't have it.  nano ~/.bash_completion  add the following:  for bcfile in ~/.bash_completion.d/* ; do\n  . $bcfile\ndone", 
            "title": "Bash-completion"
        }, 
        {
            "location": "/download/#previous-versions", 
            "text": "csvtk v0.9.1   csvtk replace : fix bug when replacing with key-value pairs brought in v0.8.0    csvtk v0.9.0   add subcommand  csvtk mutate2 : create new column from selected fields by  awk-like artithmetic/string expressions  add new command  genautocomplete  to generate  shell autocompletion  script!    csvtk v0.8.0   new command  csvtk gather  for gathering columns into key-value pairs .  csvtk sort : support  sorting by user-defined order .  fix bug of  unselecting field : wrongly reporting error of fields not existing.\naffected commands:  cut ,  filter ,  fitler2 ,  freq ,  grep ,  inter ,  mutate , rename ,  rename2 ,  replace ,  stats2 ,  uniq .  update help message of flag  -F/--fuzzy-fields .  update help message of global flag  -t , which overrides both  -d  and  -D .\n  If you want other delimiter for tabular input, use  -t $'\\t' -D \"delimiter\" .    csvtk v0.7.1   csvtk plot box  and  csvtk plot line : fix bugs for special cases of input  compile with go1.8.1    csvtk v0.7.0   fig bug of \"stricter field checking\" in v0.6.0 and v0.6.1 when using flag  -F/--fuzzy-fields  csvtk pretty  and  csvtk csv2md : add attention that\n  these commands treat the first row as header line and require them to be unique.  csvtk stat  renamed to  csvtk stats , old name is still available as an alias.  csvtk stat2  renamed to  csvtk stats2 , old name is still available as an alias.  issues/13   seamlessly support for data with meta line of separator declaration used by MS Excel .    csvtk v0.6.1   csvtk cut : minor bug: panic when no fields given. i.e.,  csvtk cut .\nAll relevant commands have been fixed.    csvtk v0.6.0   csvtk grep :  large performance improvement by discarding goroutine  (multiple threads),\n  and  keeping output in order of input .  Better column name checking and  stricter field checking,\n  fields out of range are not ignored now .\n  Affected commands include  cut ,  filter ,  freq ,  grep ,  inter ,  mutate ,\n   rename ,  rename2 ,  replace ,  stat2 , and  uniq .  New command:  csvtk filter2 , filtering rows by artithmetic/string expressions like  awk .    csvtk v0.5.0   csvtk cut : delete flag  -n/--names , move it to a new command  csvtk headers  new command:  csvtk headers  new command:  csvtk head  new command:  csvtk sample    csvtk v0.4.6   csvtk grep : fix result highlight when flag  -v  is on.    csvtk v0.4.5   csvtk join : support the 2nd or later files with entries with same ID.    csvtk v0.4.4   add command  csvtk freq : frequencies of selected fields  add lots of examples in  usage page    csvtk v0.4.3   improvement of using experience: flag  -n  is not required anymore when flag  -H  in  csvtk mutate    csvtk v0.4.2   fix highlight bug of  csvtk grep : if the pattern matches multiple parts,\nthe text will be wrongly edited.  changes: disable highlight when pattern file given.  change the default output of all ploting commands to STDOUT, now you can\npipe the image to \"display\" command of Imagemagic.    csvtk v0.4.1   Nothing changed. Just fix the links due to inappropriate deployment of v0.4.0    csvtk v0.4.0   add flag for  csvtk replace :  -K  ( --keep-key ) keep the key as value when\nno value found for the key. This is open in default in previous versions.    csvtk v0.3.9 \n    fix bug: header row incomplete in  csvtk sort  result    csvtk v0.3.8.1 \n    fix bug of flag parsing library  pflag , detail .\nThe bug affected the  csvtk grep -r -p , when value of  -p  contain \"[\" and \"]\"\nat the beginning or end, they are wrongly parsed.    csvtk v0.3.8 \n    new feature:  csvtk cut  supports ordered fields output. e.g.,  csvtk cut -f 2,1 \n  outputs the 2nd column in front of 1th column.  new commands:  csvtk plot  can plot three types of plots by subcommands:  csvtk plot hist : histogram  csvtk plot box : boxplot  csvtk plot line : line plot and scatter plot      csvtk v0.3.7 \n    fix a serious bug of using negative field of column name, e.g.  -f \"-id\"    csvtk v0.3.6 \n    csvtk replace  support replacement symbols  {nr}  (record number)\n  and  {kv}  (corresponding value of the key ($1) by key-value file)    csvtk v0.3.5.2 \n    add flag  --fill  for  csvtk join , so we can fill the unmatched data  fix typo    csvtk v0.3.5.1 \n    fix minor bug of reading lines ending with  \\r\\n  from a dependency package    csvtk v0.3.5 \n    fix minor bug of  csv2md  add subcommand  version  which could check for update    csvtk v0.3.4 \n    fix bug of  csvtk replace  that head row should not be edited.    csvtk v0.3.3 \n    fix bug of  csvtk grep -t -P    csvtk v0.3.2 \n    fix bug of  inter    csvtk v0.3.1 \n    add support of search multiple fields for  grep    csvtk v0.3 \n    add subcommand  csv2md    csvtk v0.2.9 \n    add more flags to subcommand  pretty  fix bug of  csvtk cut -n  add subcommand  filter    csvtk v0.2.8 \n    add subcommand  pretty  -- convert CSV to readable aligned table    csvtk v0.2.7 \n    fix highlight failing in windows    csvtk v0.2.6 \n    fix one error message of  grep  highlight matched fields in result of  grep    csvtk v0.2.5 \n    fix bug of  stat  that failed to considerate files with header row  add subcommand  stat2  - summary of selected number fields  make the output of  stat  prettier    csvtk v0.2.4 \n    fix bug of handling comment lines  add some notes before using csvtk    csvtk v0.2.3 \n    add flag  --colnames  to  cut  flag  -f  ( --fields ) of  join  supports single value now    csvtk v0.2.2 \n    add flag  --keep-unmathed  to  join    csvtk v0.2 \n    finish almost functions    csvtk v0.2.1 \n    fix bug of  mutate      \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Previous Versions"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage and Examples\n\n\nBefore use\n\n\nAttention\n\n\n\n\nThe CSV parser requires all the lines have same number of fields/columns.\n    Even lines with spaces will cause error.\n\n\nBy default, csvtk thinks your files have header row, if not, switch flag \n-H\n on.\n\n\nColumn names better be unique.\n\n\nBy default, lines starting with \n#\n will be ignored, if the header row\n    starts with \n#\n, please assign flag \n-C\n another rare symbol, e.g. \n'$'\n.\n\n\nBy default, csvtk handles CSV files, use flag \n-t\n for tab-delimited files.\n\n\nIf \n\"\n exists in tab-delimited files, use flag \n-l\n.\n\n\n\n\n\n\n\n\n\n\nTable of Contents\n\n\n\n\ncsvtk\n\n\n\n\nInformation\n\n\n\n\nheaders\n\n\nstats\n\n\nstats2\n\n\n\n\nFormat conversion\n\n\n\n\npretty\n\n\ntranspose\n\n\ncsv2md\n\n\nxlsx2csv\n\n\n\n\nSet operations\n\n\n\n\nhead\n\n\nsample\n\n\ncut\n\n\nuniq\n\n\nfreq\n\n\ninter\n\n\ngrep\n\n\nfilter\n\n\nfilter2\n\n\njoin\n\n\n\n\nEdit\n\n\n\n\nrename\n\n\nrename2\n\n\nreplace\n\n\nmutate\n\n\nmutate2\n\n\ngather\n\n\n\n\nOrdering\n\n\n\n\nsort\n\n\n\n\nPloting\n\n\n\n\nplot\n\n\nplot hist\n\n\nplot box\n\n\nplot line\n\n\n\n\nMisc\n\n\n\n\ngenautocomplete\n\n\n\n\n\n\n\ncsvtk\n\n\nUsage\n\n\nA cross-platform, efficient and practical CSV/TSV toolkit\n\nVersion: 0.10.0\n\nAuthor: Wei Shen \nshenwei356@gmail.com\n\n\nDocuments  : http://shenwei356.github.io/csvtk\nSource code: https://github.com/shenwei356/csvtk\n\nAttention:\n\n    1. The CSV parser requires all the lines have same number of fields/columns.\n       Even lines with spaces will cause error.\n    2. By default, csvtk thinks your files have header row, if not, switch flag \n-H\n on.\n    3. Column names better be unique.\n    4. By default, lines starting with \n#\n will be ignored, if the header row\n       starts with \n#\n, please assign flag \n-C\n another rare symbol, e.g. '$'.\n    5. By default, csvtk handles CSV files, use flag \n-t\n for tab-delimited files.\n    6. If \n exists in tab-delimited files, use flag \n-l\n.\n\nUsage:\n  csvtk [command]\n\nAvailable Commands:\n  csv2md          convert CSV to markdown format\n  csv2tab         convert CSV to tabular format\n  cut             select parts of fields\n  filter          filter rows by values of selected fields with artithmetic expression\n  filter2         filter rows by awk-like artithmetic/string expressions\n  freq            frequencies of selected fields\n  gather          gather columns into key-value pairs\n  genautocomplete generate shell autocompletion script\n  grep            grep data by selected fields with patterns/regular expressions\n  head            print first N records\n  headers         print headers\n  help            Help about any command\n  inter           intersection of multiple files\n  join            join multiple CSV files by selected fields\n  mutate          create new column from selected fields by regular expression\n  mutate2         create new column from selected fields by awk-like artithmetic/string expressions\n  plot            plot common figures\n  pretty          convert CSV to readable aligned table\n  rename          rename column names\n  rename2         rename column names by regular expression\n  replace         replace data of selected fields by regular expression\n  sample          sampling by proportion\n  sort            sort by selected fields\n  space2tab       convert space delimited format to CSV\n  stats           summary of CSV file\n  stats2          summary of selected digital fields\n  tab2csv         convert tabular format to CSV\n  transpose       transpose CSV data\n  uniq            unique data without sorting\n  version         print version information and check for update\n  xlsx2csv        convert XLSX to CSV format\n\nFlags:\n  -c, --chunk-size int         chunk size of CSV reader (default 50)\n  -C, --comment-char string    lines starting with commment-character will be ignored. if your header row starts with '#', please assign \n-C\n another rare symbol, e.g. '$' (default \n#\n)\n  -d, --delimiter string       delimiting character of the input CSV file (default \n,\n)\n  -h, --help                   help for csvtk\n  -l, --lazy-quotes            if given, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field\n  -H, --no-header-row          specifies that the input CSV file does not have header row\n  -j, --num-cpus int           number of CPUs to use (default value depends on your computer) (default 4)\n  -D, --out-delimiter string   delimiting character of the output CSV file (default \n,\n)\n  -o, --out-file string        out file (\n-\n for stdout, suffix .gz for gzipped out) (default \n-\n)\n  -T, --out-tabs               specifies that the output is delimited with tabs. Overrides \n-D\n\n  -t, --tabs                   specifies that the input CSV file is delimited with tabs. Overrides \n-d\n and \n-D\n\n\n\n\n\n\nheaders\n\n\nUsage\n\n\nprint headers\n\nUsage:\n  csvtk headers [flags]\n\n\n\n\n\nExamples\n\n\n$ csvtk headers testdata/*.csv$\n# testdata/1.csv\n1       name\n2       attr\n# testdata/2.csv\n1       name\n2       major\n# testdata/3.csv\n1       id\n2       name\n3       hobby\n\n\n\n\nstats\n\n\nUsage\n\n\nsummary of CSV file\n\nUsage:\n  csvtk stats [flags]\n\nAliases:\n  stats, stat\n\n\n\n\n\nExamples\n\n\n\n\n\n\nwith header row\n\n\n$ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat testdata/names.csv | csvtk stats\nfile   num_cols   num_rows\n-             4          5\n\n\n\n\n\n\n\nno header row\n\n\n$ cat  testdata/digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat  testdata/digitals.tsv | csvtk stats -t -H\nfile   num_cols   num_rows\n-             3          4\n\n\n\n\n\n\n\nstat2\n\n\nUsage\n\n\nsummary of selected digital fields: num, sum, min, max, mean, stdev\n\nUsage:\n  csvtk stats2 [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nsimplest one\n\n\n$ seq 1 5 | csvtk stats2 -H -f 1\nfield   num   sum   min   max   mean   stdev\n1         5    15     1     5      3    1.58\n\n\n\n\n\n\n\nmultiple fields\n\n\n$ cat  testdata/digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat  testdata/digitals.tsv | csvtk stats2 -t -H -f 1-3\nfield   num     sum   min     max     mean    stdev\n1         4      20     1       8        5     3.16\n2         4   1,015     2   1,000   253.75   497.51\n3         4      13     0       6     3.25      2.5\n\n\n\n\n\n\n\npretty\n\n\nUsage\n\n\nconvert CSV to readable aligned table\n\nAttention:\n\n    csv2md treats the first row as header line and requires them to be unique\n\nUsage:\n  csvtk pretty [flags]\n\nFlags:\n  -r, --align-right        align right\n  -W, --max-width int      max width\n  -w, --min-width int      min width\n  -s, --separator string   fields/columns separator (default \n   \n)\n\n\n\n\n\nExamples:\n\n\n\n\n\n\ndefault\n\n\n$ csvtk pretty testdata/names.csv\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n\n\n\n\n\n\nalign right\n\n\n$ csvtk pretty testdata/names.csv -r\nid   first_name   last_name   username\n11          Rob        Pike        rob\n 2          Ken    Thompson        ken\n 4       Robert   Griesemer        gri\n 1       Robert    Thompson        abc\nNA       Robert        Abel        123\n\n\n\n\n\n\n\ncustom separator\n\n\n$ csvtk pretty testdata/names.csv -s \" | \"\nid | first_name | last_name | username\n11 | Rob        | Pike      | rob\n2  | Ken        | Thompson  | ken\n4  | Robert     | Griesemer | gri\n1  | Robert     | Thompson  | abc\nNA | Robert     | Abel      | 123\n\n\n\n\n\n\n\ntranspose\n\n\nUsage\n\n\ntranspose CSV data\n\nUsage:\n  csvtk transpose [flags]\n\n\n\n\n\nExamples\n\n\n$ cat  testdata/digitals.tsv\n4       5       6$\n1       2       3$\n7       8       0\n8       1,000   4\n\n$ csvtk transpose -t  testdata/digitals.tsv\n4       1       7       8\n5       2       8       1,000\n6       3       0       4\n\n\n\ncsv2md\n\n\nUsage\n\n\nconvert CSV to markdown format\n\nAttention:\n\n    csv2md treats the first row as header line and requires them to be unique\n\nUsage:\n  csvtk csv2md [flags]\n\nFlags:\n  -a, --alignments string   comma separated alignments. e.g. -a l,c,c,c or -a c (default \nl\n)\n  -w, --min-width int       min width (at least 3) (default 3)\n\n\n\n\n\nExamples\n\n\n\n\n\n\ngive single alignment symbol\n\n\n$ cat testdata/names.csv | csvtk csv2md -a left\nid |first_name|last_name|username\n:--|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |12\n\n\n\nresult:\n\n\n\n\n\n\n\n\nid\n\n\nfirst_name\n\n\nlast_name\n\n\nusername\n\n\n\n\n\n\n\n\n\n\n11\n\n\nRob\n\n\nPike\n\n\nrob\n\n\n\n\n\n\n2\n\n\nKen\n\n\nThompson\n\n\nken\n\n\n\n\n\n\n4\n\n\nRobert\n\n\nGriesemer\n\n\ngri\n\n\n\n\n\n\n1\n\n\nRobert\n\n\nThompson\n\n\nabc\n\n\n\n\n\n\nNA\n\n\nRobert\n\n\nAbel\n\n\n12\n\n\n\n\n\n\n\n\n\n\n\n\ngive alignment symbols of all fields\n\n\n$ cat testdata/names.csv | csvtk csv2md -a c,l,l,l\nid |first_name|last_name|username\n:-:|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |123\n\n\n\nresult\n\n\n\n\n\n\n\n\nid\n\n\nfirst_name\n\n\nlast_name\n\n\nusername\n\n\n\n\n\n\n\n\n\n\n11\n\n\nRob\n\n\nPike\n\n\nrob\n\n\n\n\n\n\n2\n\n\nKen\n\n\nThompson\n\n\nken\n\n\n\n\n\n\n4\n\n\nRobert\n\n\nGriesemer\n\n\ngri\n\n\n\n\n\n\n1\n\n\nRobert\n\n\nThompson\n\n\nabc\n\n\n\n\n\n\nNA\n\n\nRobert\n\n\nAbel\n\n\n123\n\n\n\n\n\n\n\n\n\n\n\n\nxlsx2csv\n\n\nUsage\n\n\nconvert XLSX to CSV format\n\nUsage:\n  csvtk xlsx2csv [flags]\n\nFlags:\n  -h, --help                help for xlsx2csv\n  -a, --list-sheets         list all sheets\n  -i, --sheet-index int     Nth sheet to retrieve (default 1)\n  -n, --sheet-name string   sheet to retrieve\n\n\n\n\n\nExamples\n\n\n\n\n\n\nlist all sheets\n\n\n$ csvtk xlsx2csv ../testdata/accounts.xlsx -a\nindex   sheet\n1       names\n2       phones\n3       region\n\n\n\n\n\n\n\nretrieve sheet by index\n\n\n$ csvtk xlsx2csv ../testdata/accounts.xlsx -i 3\nname,region\nken,nowhere\ngri,somewhere\nshenwei,another\nThompson,there\n\n\n\n\n\n\n\nretrieve sheet by name\n\n\n$ csvtk xlsx2sv ../testdata/accounts.xlsx -n region\nname,region\nken,nowhere\ngri,somewhere\nshenwei,another\nThompson,there\n\n\n\n\n\n\n\nhead\n\n\nUsage\n\n\nprint first N records\n\nUsage:\n  csvtk head [flags]\n\nFlags:\n  -n, --number int   print first N records (default 10)\n\n\n\n\n\nExamples\n\n\n\n\n\n\nwith header line\n\n\n$ csvtk head -n 2 testdata/1.csv\nname,attr\nfoo,cool\nbar,handsome\n\n\n\n\n\n\n\nno header line\n\n\n$ csvtk head -H -n 2 testdata/1.csv\nname,attr\nfoo,cool\n\n\n\n\n\n\n\nsample\n\n\nUsage\n\n\nsampling by proportion\n\nUsage:\n  csvtk sample [flags]\n\nFlags:\n  -p, --proportion float   sample by proportion\n  -s, --rand-seed int      rand seed (default 11)\n\n\n\n\n\nExamples\n\n\n$ seq 100 | csvtk sample -H -p 0.5 | wc -l\n46\n\n$ seq 100 | csvtk sample -H -p 0.5 | wc -l\n46\n\n$ seq 100 | csvtk sample -H -p 0.1 | wc -l\n10\n\n$ seq 100 | csvtk sample -H -p 0.1 | wc -l\n10\n\n\n\n\ncut\n\n\nUsage\n\n\nselect parts of fields\n\nUsage:\n  csvtk cut [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB, or -f -columnA for unselect columnA\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -h, --help            help for cut\n  -i, --ignore-case     ignore case (column name)\n\n\n\n\n\nExamples\n\n\n\n\n\n\ndata:\n\n\n$ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n\n\n\n\n\n\nSelect columns by column index: \ncsvtk cut -f 1,2\n\n\n$ cat testdata/names.csv | csvtk cut -f 1,2\nid,first_name\n11,Rob\n2,Ken\n4,Robert\n1,Robert\nNA,Robert\n\n\n\n\n\n\n\nSelect columns by column names: \ncsvtk cut -f first_name,username\n\n\n$ cat testdata/names.csv | csvtk cut -f first_name,username\nfirst_name,username\nRob,rob\nKen,ken\nRobert,gri\nRobert,abc\nRobert,123\n\n\n\n\n\n\n\nUnselect\n:\n\n\n\n\n\n\nselect 3+ columns: \ncsvtk cut -f -1,-2\n\n\n$ cat testdata/names.csv | csvtk cut -f -1,-2\nlast_name,username\nPike,rob\nThompson,ken\nGriesemer,gri\nThompson,abc\nAbel,123\n\n\n\n\n\n\n\nselect columns except \nfirst_name\n: \ncsvtk cut -f -first_name\n\n\n$ cat testdata/names.csv | csvtk cut -f -first_name\nid,last_name,username\n11,Pike,rob\n2,Thompson,ken\n4,Griesemer,gri\n1,Thompson,abc\nNA,Abel,123\n\n\n\n\n\n\n\n\n\n\n\nFuzzy fields\n using wildcard character,  \ncsvtk cut -F -f \"*_name,username\"\n\n\n$ cat testdata/names.csv | csvtk cut -F -f \"*_name,username\"\nfirst_name,last_name,username\nRob,Pike,rob\nKen,Thompson,ken\nRobert,Griesemer,gri\nRobert,Thompson,abc\nRobert,Abel,123\n\n\n\n\n\n\n\nAll fields: \ncsvtk cut -F -f \"*\"\n (only works when all colnames are unique)\n\n\n$ cat testdata/names.csv | csvtk cut -F -f \"*\"\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n1,Robert,Thompson,abc\nNA,Robert,Abel,123\n\n\n\n\n\n\n\nField ranges:\n\n\n\n\n\n\ncsvtk cut -f 2-4\n for column 2,3,4\n\n\n$ cat testdata/names.csv | csvtk cut -f 2-4\nfirst_name,last_name,username\nRob,Pike,rob\nKen,Thompson,ken\nRobert,Griesemer,gri\nRobert,Thompson,abc\nRobert,Abel,123\n\n\n\n\n\n\n\ncsvtk cut -f -3--1\n for discarding column 1,2,3\n\n\n$ cat testdata/names.csv | csvtk cut -f -3--1\nusername\nrob\nken\ngri\nabc\n123\n\n\n\n\n\n\n\n\n\n\n\nuniq\n\n\nUsage\n\n\nunique data without sorting\n\nUsage:\n  csvtk uniq [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -i, --ignore-case     ignore case\n\n\n\n\n\nExamples:\n\n\n\n\n\n\ndata:\n\n\n$ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n\n\n\n\n\n\nunique first_name (it removes rows with duplicated first_name)\n\n\n$ cat testdata/names.csv | csvtk uniq -f first_name\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n\n\n\n\n\n\n\nunique first_name, a more common way\n\n\n$ cat testdata/names.csv | csvtk cut -f first_name | csvtk uniq -f 1\nfirst_name\nRob\nKen\nRobert\n\n\n\n\n\n\n\nfreq\n\n\nUsage\n\n\nfrequencies of selected fields\n\nUsage:\n  csvtk freq [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -i, --ignore-case     ignore case\n  -r, --reverse         reverse order while sorting\n  -n, --sort-by-freq    sort by frequency\n  -k, --sort-by-key     sort by key\n\n\n\n\n\nExamples\n\n\n\n\n\n\none filed\n\n\n$ cat testdata/names.csv | csvtk freq -f first_name | csvtk pretty\nfirst_name   frequency\nKen          1\nRob          1\nRobert       3\n\n\n\n\n\n\n\nsort by frequency. you can also use \ncsvtk sort\n with more sorting options\n\n\n$ cat testdata/names.csv | csvtk freq -f first_name -n -r | csvtk pretty\nfirst_name   frequency\nRobert       3\nKen          1\nRob          1\n\n\n\n\n\n\n\nsorty by key\n\n\n$ cat testdata/names.csv | csvtk freq -f first_name -k | csvtk pretty\nfirst_name   frequency\nKen          1\nRob          1\nRobert       3\n\n\n\n\n\n\n\nmultiple fields\n\n\n$ cat testdata/names.csv | csvtk freq -f first_name,last_name | csvtk pretty\nfirst_name   last_name   frequency\nRobert       Abel        1\nKen          Thompson    1\nRob          Pike        1\nRobert       Thompson    1\nRobert       Griesemer   1\n\n\n\n\n\n\n\ndata without header row\n\n\n$ cat testdata/ testdata/digitals.tsv  | csvtk -t -H freq -f 1\n8       1\n1       1\n4       1\n7       1\n\n\n\n\n\n\n\ninter\n\n\nUsage\n\n\nintersection of multiple files\n\nUsage:\n  csvtk inter [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -i, --ignore-case     ignore case\n\n\n\n\n\nExamples:\n\n\n$ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/region.csv\nname,region\nken,nowhere\ngri,somewhere\nshenwei,another\nThompson,there\n\n$ csvtk inter testdata/phones.csv testdata/region.csv\nusername\ngri\nken\nshenwei\n\n\n\ngrep\n\n\nUsage\n\n\ngrep data by selected fields with patterns/regular expressions\n\nUsage:\n  csvtk grep [flags]\n\nFlags:\n  -f, --fields string         comma separated key fields, column name or index. e.g. -f 1-3 or -f id,id2 or -F -f \ngroup*\n (default \n1\n)\n  -F, --fuzzy-fields          using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -h, --help                  help for grep\n  -i, --ignore-case           ignore case\n  -v, --invert                invert match\n  -n, --line-number           print line number as the first column (\nn\n)\n  -N, --no-highlight          no highlight\n  -p, --pattern strings       query pattern (multiple values supported)\n  -P, --pattern-file string   pattern files (one pattern per line)\n  -r, --use-regexp            patterns are regular expression\n      --verbose               verbose output\n\n\n\n\n\nExamples\n\n\nMatched parts will be \nhighlight\n\n\n\n\n\n\nBy exact keys\n\n\n$ cat testdata/names.csv | csvtk grep -f last_name -p Pike -p Abel | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\nNA   Robert       Abel        123\n\n\n\n\n\n\n\nBy regular expression: \ncsvtk grep -f first_name -r -p Rob\n\n\n$ cat testdata/names.csv | csvtk grep -f first_name -r -p Rob | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n\n\n\n\n\n\nBy pattern list: \ncsvtk grep -f first_name -P name_list.txt\n\n\n\n\nRemore rows containing missing data (NA): \ncsvtk grep -F -f \"*\" -r -p \"^$\" -v\n\n\nshow line number\n$ cat names.csv | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n$ cat names.csv | csvtk grep -f first_name -r -i -p rob -n | csvtk pretty\nn   id   first_name   last_name   username\n1   11   Rob          Pike        rob\n3   4    Robert       Griesemer   gri\n4   1    Robert       Thompson    abc\n5   NA   Robert       Abel        123\n\n\n\n\n\n\n\nfilter\n\n\nUsage\n\n\nfilter rows by values of selected fields with artithmetic expression\n\nUsage:\n  csvtk filter [flags]\n\nFlags:\n      --any             print record if any of the field satisfy the condition\n  -f, --filter string   filter condition. e.g. -f \nage\n12\n or -f \n1,3\n=2\n or -F -f \nc*!=0\n\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -h, --help            help for filter\n  -n, --line-number     print line number as the first column (\nn\n)\n\n\n\n\n\nExamples\n\n\n\n\n\n\nsingle field\n\n\n$ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat testdata/names.csv | csvtk filter -f \"id\n0\" | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\n\n\n\n\n\n\n\nmultiple fields\n\n\n$ cat  testdata/digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat  testdata/digitals.tsv | csvtk -t -H filter -f \"1-3\n0\"\n4       5       6\n1       2       3\n8       1,000   4\n\n\n\nusing \n--any\n to print record if any of the field satisfy the condition\n\n\n$  cat  testdata/digitals.tsv | csvtk -t -H filter -f \"1-3\n0\" --any\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n\n\n\n\n\n\nfuzzy fields\n\n\n$  cat testdata/names.csv | csvtk filter -F -f \"i*!=0\"\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n1,Robert,Thompson,abc\n\n\n\n\n\n\n\nfilter2\n\n\nUsage\n\n\nfilter rows by awk-like artithmetic/string expressions\n\nThe artithmetic/string expression is supported by:\n\n    https://github.com/Knetic/govaluate\n\nSupported operators and types:\n\n    Modifiers: + - / * \n | ^ ** % \n \n\n    Comparators: \n \n= \n \n= == != =~ !~\n    Logical ops: || \n\n    Numeric constants, as 64-bit floating point (12345.678)\n    String constants (single quotes: 'foobar')\n    Date constants (single quotes)\n    Boolean constants: true false\n    Parenthesis to control order of evaluation ( )\n    Arrays (anything separated by , within parenthesis: (1, 2, 'foo'))\n    Prefixes: ! - ~\n    Ternary conditional: ? :\n    Null coalescence: ??\n\nUsage:\n  csvtk filter2 [flags]\n\nFlags:\n  -f, --filter string   awk-like filter condition. e.g. '$age\n12' or '$1 \n $3' or '$name==\nabc\n' or '$1 % 2 == 0'\n  -h, --help            help for filter2\n  -n, --line-number     print line number as the first column (\nn\n)\n\n\n\n\n\n\nExamples:\n\n\n\n\n\n\nfilter rows with \nid\n greater than 3:\n\n\n$ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat testdata/names.csv | csvtk filter2 -f '$id \n 3'\nid,first_name,last_name,username\n11,Rob,Pike,rob\n4,Robert,Griesemer,gri\n\n\n\n\n\n\n\nArtithmetic and string expressions\n\n\n$ cat testdata/names.csv | csvtk filter2 -f '$id \n 3 || $username==\"ken\"'\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n\n\n\n\n\n\n\nMore artithmetic expressions\n\n\n$ cat testdata/digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat testdata/digitals.tsv | csvtk filter2 -H -t -f '$1 \n 2 \n $2 % 2 == 0'\n7       8       0\n8       1,000   4\n\n# comparison between fields and support\n$ cat testdata/digitals.tsv | csvtk filter2 -H -t -f '$2 \n= $3 || ( $1 / $2 \n 0.5 )'\n4       5       6\n1       2       3\n7       8       0\n\n\n\n\n\n\n\njoin\n\n\nUsage\n\n\njoin 2nd and later files to the first file by selected fields.\n\nMultiple keys supported, but the orders are ignored.\n\nUsage:\n  csvtk join [flags]\n\nFlags:\n  -f, --fields string    Semicolon separated key fields of all files, if given one, we think all the files have the same key columns. Fields of different files should be separated by \n;\n, e.g -f \n1;2\n or -f \nA,B;C,D\n or -f id (default \n1\n)\n      --fill string      fill content for unmatched data\n  -F, --fuzzy-fields     using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -i, --ignore-case      ignore case\n  -k, --keep-unmatched   keep unmatched data of the first file\n\n\n\n\n\nExamples:\n\n\n\n\n\n\ndata\n\n\n$ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/region.csv\nname,region\nken,nowhere\ngri,somewhere\nshenwei,another\nThompson,there\n\n\n\n\n\n\n\nAll files have same key column: \ncsvtk join -f id file1.csv file2.csv\n\n\n$ csvtk join -f 1 testdata/phones.csv testdata/region.csv\nusername,phone,region\ngri,11111,somewhere\nken,22222,nowhere\nshenwei,999999,another\n\n\n\n\n\n\n\nkeep unmatched\n\n\n$ csvtk join -f 1 testdata/phones.csv testdata/region.csv --keep-unmatched\nusername,phone,region\ngri,11111,somewhere\nrob,12345,\nken,22222,nowhere\nshenwei,999999,another\n\n\n\n\n\n\n\nkeep unmatched and fill with something\n\n\n$ csvtk join -f 1 testdata/phones.csv testdata/region.csv --keep-unmatched --fill NA\nusername,phone,region\ngri,11111,somewhere\nrob,12345,NA\nken,22222,nowhere\nshenwei,999999,another\n\n\n\n\n\n\n\nFiles have different key columns: \ncsvtk join -f \"username;username;name\" testdata/names.csv phone.csv adress.csv -k\n. \nNote that fields are separated with \n;\n not \n,\n.\n\n\n$ csvtk join -f \"username;name\"  testdata/phones.csv testdata/region.csv\nusername,phone,region\ngri,11111,somewhere\nken,22222,nowhere\nshenwei,999999,another\n\n\n\n\n\n\n\nThe 2nd or later files have entries with same ID:\n\n\n$ cat testdata/1.csv\nname,attr\nfoo,cool\nbar,handsome\nbob,beutiful\n\n$ cat testdata/2.csv\nname,major\nbar,bioinformatics\nbob,microbiology\nbob,computer science\n\n$ cat testdata/3.csv\nid,name,hobby\n1,bar,baseball\n2,bob,basketball\n3,foo,football\n4,wei,programming\n\n$ csvtk join testdata/1.csv testdata/2.csv  | csvtk pretty\nname   attr       major\nbar    handsome   bioinformatics\nbob    beutiful   microbiology\nbob    beutiful   computer science\n\n$ csvtk join testdata/{1,2,3}.csv -f name -k | csvtk pretty\nname   attr       major               id   hobby\nfoo    cool                           3    football\nbar    handsome   bioinformatics      1    baseball\nbob    beutiful   microbiology        2    basketball\nbob    beutiful   computer science    2    basketball\n\n$ csvtk join testdata/{3,1,2}.csv -f name -k | csvtk pretty\nid   name   hobby         attr       major\n1    bar    baseball      handsome   bioinformatics\n2    bob    basketball    beutiful   computer science\n2    bob    basketball    beutiful   computer science\n3    foo    football      cool\n4    wei    programming\n\n\n\n\n\n\n\nrename\n\n\nUsage\n\n\nrename column names\n\nUsage:\n  csvtk rename [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -n, --names string    comma separated new names\n\n\n\n\n\nExamples:\n\n\n\n\nSetting new names: \ncsvtk rename -f A,B -n a,b\n or \ncsvtk rename -f 1-3 -n a,b,c\n$ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/phones.csv | csvtk rename -f 1 -n \u59d3\u540d\n\u59d3\u540d,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n\n\n\n\n\n\nrename2\n\n\nUsage\n\n\nrename column names by regular expression\n\nUsage:\n  csvtk rename2 [flags]\n\nFlags:\n\n\n\n\n\nExamples:\n\n\n\n\nreplacing with original names by regular express: \ncat testdata/c.csv | csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'\n for adding prefix to all column names.\n$ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/phones.csv | csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_${1}_suffix'\nprefix_username_suffix,prefix_phone_suffix\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n\n\n\n\n\n\nreplace\n\n\nUsage\n\n\nreplace data of selected fields by regular expression\n\nNote that the replacement supports capture variables.\ne.g. $1 represents the text of the first submatch.\nATTENTION: use SINGLE quote NOT double quotes in *nix OS.\n\nExamples: Adding space to all bases.\n\n    csvtk replace -p \n(.)\n -r '$1 ' -s\n\nOr use the \\ escape character.\n\n    csvtk replace -p \n(.)\n -r \n\\$1 \n -s\n\nmore on: http://shenwei356.github.io/csvtk/usage/#replace\n\nSpecial replacement symbols:\n\n        {nr}    Record number, starting from 1\n        {kv}    Corresponding value of the key (captured variable $n) by key-value file,\n                n can be specified by flag -I (--key-capt-idx) (default: 1)\n\nUsage:\n  csvtk replace [flags]\n\nFlags:\n  -f, --fields string          select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -F, --fuzzy-fields           using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -i, --ignore-case            ignore case\n  -K, --keep-key               keep the key as value when no value found for the key\n  -I, --key-capt-idx int       capture variable index of key (1-based) (default 1)\n      --key-miss-repl string   replacement for key with no corresponding value\n  -k, --kv-file string         tab-delimited key-value file for replacing key with value when using \n{kv}\n in -r (--replacement)\n  -p, --pattern string         search regular expression\n  -r, --replacement string     replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: for *nix OS, use SINGLE quote NOT double quotes or use the \\ escape character. Record number is also supported by \n{nr}\n.use ${1} instead of $1 when {kv} given!\n\n\n\n\n\nExamples\n\n\n\n\nremove Chinese charactors:  \ncsvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"\n\n\nreplace by key-value files: \ncsvtk replace -f 1 -p \"(.+)\" -r \"value of $1 is {kv}\" -k kv.tsv\n$ cat data.tsv\nname    id\nA       ID001\nB       ID002\nC       ID004\n\n$ cat alias.tsv\n001     Tom\n002     Bob\n003     Jim\n\n$ csvtk replace -t -f 2  -p \"ID(.+)\" -r \"N: {nr}, alias: {kv}\" -k alias.tsv  data.tsv\n[INFO] read key-value file: alias.tsv\n[INFO] 3 pairs of key-value loaded\nname    id\nA       N: 1, alias: Tom\nB       N: 2, alias: Bob\nC       N: 3, alias: 004\n\n\n\n\n\n\n\nmutate\n\n\nUsage\n\n\ncreate new column from selected fields by regular expression\n\nUsage:\n  csvtk mutate [flags]\n\nFlags:\n  -f, --fields string    select only these fields. e.g -f 1,2 or -f columnA,columnB (default \n1\n)\n  -i, --ignore-case      ignore case\n      --na               for unmatched data, use blank instead of original data\n  -n, --name string      new column name\n  -p, --pattern string   search regular expression with capture bracket. e.g. (default \n^(.+)$\n)\n\n\n\n\n\nExamples\n\n\n\n\nIn default, copy a column: \ncsvtk mutate -f id -n newname\n\n\nextract prefix of data as group name using regular expression (get \"A\" from \"A.1\" as group name):\n  \ncsvtk mutate -f sample -n group -p \"^(.+?)\\.\"\n\n\nget the first letter as new column\n$ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/phones.csv | csvtk mutate -f username -p \"^(\\w)\" -n first_letter\nusername,phone,first_letter\ngri,11111,g\nrob,12345,r\nken,22222,k\nshenwei,999999,s\n\n\n\n\n\n\n\nmutate2\n\n\nUsage\n\n\ncreate new column from selected fields by awk-like artithmetic/string expressions\n\nThe artithmetic/string expression is supported by:\n\n    https://github.com/Knetic/govaluate\n\nSupported operators and types:\n\n    Modifiers: + - / * \n | ^ ** % \n \n\n    Comparators: \n \n= \n \n= == != =~ !~\n    Logical ops: || \n\n    Numeric constants, as 64-bit floating point (12345.678)\n    String constants (single quotes: 'foobar')\n    Date constants (single quotes)\n    Boolean constants: true false\n    Parenthesis to control order of evaluation ( )\n    Arrays (anything separated by , within parenthesis: (1, 2, 'foo'))\n    Prefixes: ! - ~\n    Ternary conditional: ? :\n    Null coalescence: ??\n\nUsage:\n  csvtk mutate2 [flags]\n\nFlags:\n  -L, --digits int          number of digits after the dot (default 2)\n  -e, --expression string   artithmetic/string expressions. e.g. '$1 + $2', '$a / $b', ' $1 \n 100 ? \nbig\n : \nsmall\n '\n  -h, --help                help for mutate2\n  -n, --name string         new column name\n\n\n\n\n\nExample\n\n\n\n\n\n\nMath\n\n\n$ cat testdata/digitals.tsv | csvtk mutate2 -t -H -e '$1 + $3' -L 0\n4       5       6       10\n1       2       3       4\n7       8       0       7\n8       1,000   4       12\n\n\n\n\n\n\n\nBool\n\n\n$ cat testdata/digitals.tsv | csvtk mutate2 -t -H -e '$1 \n 5'\n4       5       6       false\n1       2       3       false\n7       8       0       true\n8       1,000   4       true\n\n\n\n\n\n\n\nTernary conditional\n\n\n$ cat testdata/digitals.tsv | csvtk mutate2 -t -H -e '$1 \n 5 ? \"big\" : \"small\" '\n4       5       6       small\n1       2       3       small\n7       8       0       big\n8       1,000   4       big\n\n\n\n\n\n\n\ngather\n\n\nUsage\n\n\ngather columns into key-value pairs\n\nUsage:\n  csvtk gather [flags]\n\nFlags:\n  -f, --fields string   fields for gathering. e.g -f 1,2 or -f columnA,columnB, or -f -columnA for unselect columnA\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f \n*name\n or -F -f \nid123*\n\n  -k, --key string      name of key column to create in output\n  -v, --value string    name of value column to create in output\n\n\n\n\n\nExamples:\n\n\n$ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\n\n$ cat testdata/names.csv | csvtk gather -k item -v value -f -1\nid,item,value\n11,first_name,Rob\n11,last_name,Pike\n11,username,rob\n2,first_name,Ken\n2,last_name,Thompson\n2,username,ken\n4,first_name,Robert\n4,last_name,Griesemer\n4,username,gri\n1,first_name,Robert\n1,last_name,Thompson\n1,username,abc\nNA,first_name,Robert\nNA,last_name,Abel\nNA,username,123\n\n\n\nsort\n\n\nUsage\n\n\nsort by selected fields\n\nUsage:\n  csvtk sort [flags]\n\nFlags:\n  -k, --keys value   keys. sort type supported, \nn\n for number and \nr\n for reverse. e.g. \n-k 1\n or \n-k A:r\n or \n-k 1:nr -k 2\n (default [1])\n\n\n\n\n\nExamples\n\n\n\n\n\n\ndata\n\n\n$ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n\n\n\n\n\n\nBy single column : \ncsvtk sort -k 1\n or \ncsvtk sort -k last_name\n\n\n\n\n\n\nin alphabetical order\n\n\n$ cat testdata/names.csv | csvtk sort -k first_name\nid,first_name,last_name,username\n2,Ken,Thompson,ken\n11,Rob,Pike,rob\nNA,Robert,Abel,123\n1,Robert,Thompson,abc\n4,Robert,Griesemer,gri\n\n\n\n\n\n\n\nin reversed alphabetical order\n\n\n$ cat testdata/names.csv | csvtk sort -k first_name:r\nid,first_name,last_name,username\nNA,Robert,Abel,123\n1,Robert,Thompson,abc\n4,Robert,Griesemer,gri\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n\n\n\n\n\n\n\nin numerical order\n\n\n$ cat testdata/names.csv | csvtk sort -k id:n\nid,first_name,last_name,username\nNA,Robert,Abel,123\n1,Robert,Thompson,abc\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n11,Rob,Pike,rob\n\n\n\n\n\n\n\n\n\n\n\nBy multiple columns: \ncsvtk sort -k 1,2\n or \ncsvtk sort -k 1 -k 2\n or \ncsvtk sort -k last_name,age\n\n\n# by first_name and then last_name\n$ cat testdata/names.csv | csvtk sort -k first_name -k last_name\nid,first_name,last_name,username\n2,Ken,Thompson,ken\n11,Rob,Pike,rob\nNA,Robert,Abel,123\n4,Robert,Griesemer,gri\n1,Robert,Thompson,abc\n\n# by first_name and then ID\n$ cat testdata/names.csv | csvtk sort -k first_name -k id:n\nid,first_name,last_name,username\n2,Ken,Thompson,ken\n11,Rob,Pike,rob\nNA,Robert,Abel,123\n1,Robert,Thompson,abc\n4,Robert,Griesemer,gri\n\n\n\n\n\n\n\nBy \nuser-defined order\n\n\n# user-defined order/level\n$ cat testdata/size_level.txt\ntiny\nmini\nsmall\nmedium\nbig\n\n# original data\n$ cat testdata/size.csv\nid,size\n1,Huge\n2,Tiny\n3,Big\n4,Small\n5,Medium\n\n$ csvtk sort -k 2:u -i -L 2:testdata/size_level.txt testdata/size.csv\nid,size\n2,Tiny\n4,Small\n5,Medium\n3,Big\n1,Huge\n\n\n\n\n\n\n\nplot\n\n\nUsage\n\n\nplot common figures\n\nNotes:\n\n  1. Output file can be set by flag -o/--out-file.\n  2. File format is determined by the out file suffix.\n     Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n  3. If flag -o/--out-file not set (default), image is written to stdout,\n     you can display the image by pipping to \ndisplay\n command of Imagemagic\n     or just redirect to file.\n\nUsage:\n  csvtk plot [command]\n\nAvailable Commands:\n  box         plot boxplot\n  hist        plot histogram\n  line        line plot and scatter plot\n\nFlags:\n      --axis-width float     axis width (default 1.5)\n  -f, --data-field string    column index or column name of data (default \n1\n)\n      --format string        image format for stdout when flag -o/--out-file not given. available values: eps, jpg|jpeg, pdf, png, svg, and tif|tiff. (default \npng\n)\n  -g, --group-field string   column index or column name of group\n      --height float         Figure height (default 4.5)\n      --label-size int       label font size (default 14)\n      --tick-width float     axis tick width (default 1.5)\n      --title string         Figure title\n      --title-size int       title font size (default 16)\n      --width float          Figure width (default 6)\n      --x-max string         maximum value of X axis\n      --x-min string         minimum value of X axis\n      --xlab string          x label text\n      --y-max string         maximum value of Y axis\n      --y-min string         minimum value of Y axis\n      --ylab string          y label text\n\n\n\n\n\nNote that most of the flags of \nplot\n are global flags of the subcommands\n\nhist\n, \nbox\n and \nline\n\n\nNotes of image output\n\n\n\n\nOutput file can be set by flag -o/--out-file.\n\n\nFile format is determined by the out file suffix.\n   Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n\n\nIf flag -o/--out-file not set (default), image is written to stdout,\n   you can display the image by pipping to \"display\" command of Imagemagic\n   or just redirect to file.\n\n\n\n\nplot hist\n\n\nUsage\n\n\nplot histogram\n\nNotes:\n\n  1. Output file can be set by flag -o/--out-file.\n  2. File format is determined by the out file suffix.\n     Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n  3. If flag -o/--out-file not set (default), image is written to stdout,\n     you can display the image by pipping to \ndisplay\n command of Imagemagic\n     or just redirect to file.\n\nUsage:\n  csvtk plot hist [flags]\n\nFlags:\n      --bins int          number of bins (default 50)\n      --color-index int   color index, 1-7 (default 1)\n\n\n\n\n\nExamples\n\n\n\n\n\n\nexample data\n\n\n$ zcat testdata/grouped_data.tsv.gz | head -n 5 | csvtk -t pretty\nGroup     Length   GC Content\nGroup A   97       57.73\nGroup A   95       49.47\nGroup A   97       49.48\nGroup A   100      51.00\n\n\n\n\n\n\n\nplot histogram with data of the second column:\n\ncsvtk -t plot hist testdata/grouped_data.tsv.gz -f 2 --title Histogram -o histogram.png\n\n\n\n\n\n\n\n\nYou can also write image to stdout and pipe to \"display\" command of Imagemagic:\n\ncsvtk -t plot hist testdata/grouped_data.tsv.gz -f 2 | display\n\n\n\n\n\n\nplot box\n\n\nUsage\n\n\nplot boxplot\n\nNotes:\n\n  1. Output file can be set by flag -o/--out-file.\n  2. File format is determined by the out file suffix.\n     Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n  3. If flag -o/--out-file not set (default), image is written to stdout,\n     you can display the image by pipping to \ndisplay\n command of Imagemagic\n     or just redirect to file.\n\nUsage:\n  csvtk plot box [flags]\n\nFlags:\n      --box-width float   box width\n      --horiz             horize box plot\n\n\n\n\n\nExamples\n\n\n\n\n\n\nplot boxplot with data of the \"GC Content\" (third) column,\ngroup information is the \"Group\" column.\n\ncsvtk -t plot box testdata/grouped_data.tsv.gz -g \"Group\" -f \"GC Content\"  --width 3 --title \"Box plot \n boxplot.png\"\n\n\n\n\n\n\n\n\nplot horiz boxplot with data of the \"Length\" (second) column,\ngroup information is the \"Group\" column.\n\ncsvtk -t plot box testdata/grouped_data.tsv.gz -g \"Group\" -f \"Length\"  --height 3 --width 5 --horiz --title \"Horiz box plot \n boxplot2.png\"\n\n\n\n\n\n\n\n\nplot line\n\n\nUsage\n\n\nline plot and scatter plot\n\nNotes:\n\n  1. Output file can be set by flag -o/--out-file.\n  2. File format is determined by the out file suffix.\n     Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n  3. If flag -o/--out-file not set (default), image is written to stdout,\n     you can display the image by pipping to \ndisplay\n command of Imagemagic\n     or just redirect to file.\n\nUsage:\n  csvtk plot line [flags]\n\nFlags:\n  -x, --data-field-x string   column index or column name of X for command line\n  -y, --data-field-y string   column index or column name of Y for command line\n      --legend-left           locate legend along the left edge of the plot\n      --legend-top            locate legend along the top edge of the plot\n      --line-width float      line width (default 1.5)\n      --point-size float      point size (default 3)\n      --scatter               only plot points\n\n\n\n\n\nExamples\n\n\n\n\n\n\nexample data\n\n\n$ head -n 5 testdata/xy.tsv\nGroup   X       Y\nA       0       1\nA       1       1.3\nA       1.5     1.5\nA       2.0     2\n\n\n\n\n\n\n\nplot line plot with X-Y data\n\ncsvtk -t plot line testdata/xy.tsv -x X -y Y -g Group --title \"Line plot\" \n lineplot.png\n\n\n\n\n\n\n\n\nplot scatter\n\ncsvtk -t plot line testdata/xy.tsv -x X -y Y -g Group --title \"Scatter\" --scatter \n lineplot.png\n\n\n\n\n\n\n\n\ngenautocomplete\n\n\nUsage\n\n\ngenerate shell autocompletion script\n\nNote: The current version supports Bash only.\nThis should work for *nix systems with Bash installed.\n\nHowto:\n\n1. run: csvtk genautocomplete\n\n2. create and edit ~/.bash_completion file if you don't have it.\n\n        nano ~/.bash_completion\n\n   add the following:\n\n        for bcfile in ~/.bash_completion.d/* ; do\n          . $bcfile\n        done\n\nUsage:\n  csvtk genautocomplete [flags]\n\nFlags:\n      --file string   autocompletion file (default \n/home/shenwei/.bash_completion.d/csvtk.sh\n)\n  -h, --help          help for genautocomplete\n      --type string   autocompletion type (currently only bash supported) (default \nbash\n)\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage-and-examples", 
            "text": "", 
            "title": "Usage and Examples"
        }, 
        {
            "location": "/usage/#before-use", 
            "text": "Attention   The CSV parser requires all the lines have same number of fields/columns.\n    Even lines with spaces will cause error.  By default, csvtk thinks your files have header row, if not, switch flag  -H  on.  Column names better be unique.  By default, lines starting with  #  will be ignored, if the header row\n    starts with  # , please assign flag  -C  another rare symbol, e.g.  '$' .  By default, csvtk handles CSV files, use flag  -t  for tab-delimited files.  If  \"  exists in tab-delimited files, use flag  -l .", 
            "title": "Before use"
        }, 
        {
            "location": "/usage/#table-of-contents", 
            "text": "csvtk   Information   headers  stats  stats2   Format conversion   pretty  transpose  csv2md  xlsx2csv   Set operations   head  sample  cut  uniq  freq  inter  grep  filter  filter2  join   Edit   rename  rename2  replace  mutate  mutate2  gather   Ordering   sort   Ploting   plot  plot hist  plot box  plot line   Misc   genautocomplete", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/usage/#csvtk", 
            "text": "Usage  A cross-platform, efficient and practical CSV/TSV toolkit\n\nVersion: 0.10.0\n\nAuthor: Wei Shen  shenwei356@gmail.com \n\nDocuments  : http://shenwei356.github.io/csvtk\nSource code: https://github.com/shenwei356/csvtk\n\nAttention:\n\n    1. The CSV parser requires all the lines have same number of fields/columns.\n       Even lines with spaces will cause error.\n    2. By default, csvtk thinks your files have header row, if not, switch flag  -H  on.\n    3. Column names better be unique.\n    4. By default, lines starting with  #  will be ignored, if the header row\n       starts with  # , please assign flag  -C  another rare symbol, e.g. '$'.\n    5. By default, csvtk handles CSV files, use flag  -t  for tab-delimited files.\n    6. If   exists in tab-delimited files, use flag  -l .\n\nUsage:\n  csvtk [command]\n\nAvailable Commands:\n  csv2md          convert CSV to markdown format\n  csv2tab         convert CSV to tabular format\n  cut             select parts of fields\n  filter          filter rows by values of selected fields with artithmetic expression\n  filter2         filter rows by awk-like artithmetic/string expressions\n  freq            frequencies of selected fields\n  gather          gather columns into key-value pairs\n  genautocomplete generate shell autocompletion script\n  grep            grep data by selected fields with patterns/regular expressions\n  head            print first N records\n  headers         print headers\n  help            Help about any command\n  inter           intersection of multiple files\n  join            join multiple CSV files by selected fields\n  mutate          create new column from selected fields by regular expression\n  mutate2         create new column from selected fields by awk-like artithmetic/string expressions\n  plot            plot common figures\n  pretty          convert CSV to readable aligned table\n  rename          rename column names\n  rename2         rename column names by regular expression\n  replace         replace data of selected fields by regular expression\n  sample          sampling by proportion\n  sort            sort by selected fields\n  space2tab       convert space delimited format to CSV\n  stats           summary of CSV file\n  stats2          summary of selected digital fields\n  tab2csv         convert tabular format to CSV\n  transpose       transpose CSV data\n  uniq            unique data without sorting\n  version         print version information and check for update\n  xlsx2csv        convert XLSX to CSV format\n\nFlags:\n  -c, --chunk-size int         chunk size of CSV reader (default 50)\n  -C, --comment-char string    lines starting with commment-character will be ignored. if your header row starts with '#', please assign  -C  another rare symbol, e.g. '$' (default  # )\n  -d, --delimiter string       delimiting character of the input CSV file (default  , )\n  -h, --help                   help for csvtk\n  -l, --lazy-quotes            if given, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field\n  -H, --no-header-row          specifies that the input CSV file does not have header row\n  -j, --num-cpus int           number of CPUs to use (default value depends on your computer) (default 4)\n  -D, --out-delimiter string   delimiting character of the output CSV file (default  , )\n  -o, --out-file string        out file ( -  for stdout, suffix .gz for gzipped out) (default  - )\n  -T, --out-tabs               specifies that the output is delimited with tabs. Overrides  -D \n  -t, --tabs                   specifies that the input CSV file is delimited with tabs. Overrides  -d  and  -D", 
            "title": "csvtk"
        }, 
        {
            "location": "/usage/#headers", 
            "text": "Usage  print headers\n\nUsage:\n  csvtk headers [flags]  Examples  $ csvtk headers testdata/*.csv$\n# testdata/1.csv\n1       name\n2       attr\n# testdata/2.csv\n1       name\n2       major\n# testdata/3.csv\n1       id\n2       name\n3       hobby", 
            "title": "headers"
        }, 
        {
            "location": "/usage/#stats", 
            "text": "Usage  summary of CSV file\n\nUsage:\n  csvtk stats [flags]\n\nAliases:\n  stats, stat  Examples    with header row  $ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat testdata/names.csv | csvtk stats\nfile   num_cols   num_rows\n-             4          5    no header row  $ cat  testdata/digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat  testdata/digitals.tsv | csvtk stats -t -H\nfile   num_cols   num_rows\n-             3          4", 
            "title": "stats"
        }, 
        {
            "location": "/usage/#stat2", 
            "text": "Usage  summary of selected digital fields: num, sum, min, max, mean, stdev\n\nUsage:\n  csvtk stats2 [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f  *name  or -F -f  id123*   Examples    simplest one  $ seq 1 5 | csvtk stats2 -H -f 1\nfield   num   sum   min   max   mean   stdev\n1         5    15     1     5      3    1.58    multiple fields  $ cat  testdata/digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat  testdata/digitals.tsv | csvtk stats2 -t -H -f 1-3\nfield   num     sum   min     max     mean    stdev\n1         4      20     1       8        5     3.16\n2         4   1,015     2   1,000   253.75   497.51\n3         4      13     0       6     3.25      2.5", 
            "title": "stat2"
        }, 
        {
            "location": "/usage/#pretty", 
            "text": "Usage  convert CSV to readable aligned table\n\nAttention:\n\n    csv2md treats the first row as header line and requires them to be unique\n\nUsage:\n  csvtk pretty [flags]\n\nFlags:\n  -r, --align-right        align right\n  -W, --max-width int      max width\n  -w, --min-width int      min width\n  -s, --separator string   fields/columns separator (default      )  Examples:    default  $ csvtk pretty testdata/names.csv\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123    align right  $ csvtk pretty testdata/names.csv -r\nid   first_name   last_name   username\n11          Rob        Pike        rob\n 2          Ken    Thompson        ken\n 4       Robert   Griesemer        gri\n 1       Robert    Thompson        abc\nNA       Robert        Abel        123    custom separator  $ csvtk pretty testdata/names.csv -s \" | \"\nid | first_name | last_name | username\n11 | Rob        | Pike      | rob\n2  | Ken        | Thompson  | ken\n4  | Robert     | Griesemer | gri\n1  | Robert     | Thompson  | abc\nNA | Robert     | Abel      | 123", 
            "title": "pretty"
        }, 
        {
            "location": "/usage/#transpose", 
            "text": "Usage  transpose CSV data\n\nUsage:\n  csvtk transpose [flags]  Examples  $ cat  testdata/digitals.tsv\n4       5       6$\n1       2       3$\n7       8       0\n8       1,000   4\n\n$ csvtk transpose -t  testdata/digitals.tsv\n4       1       7       8\n5       2       8       1,000\n6       3       0       4", 
            "title": "transpose"
        }, 
        {
            "location": "/usage/#csv2md", 
            "text": "Usage  convert CSV to markdown format\n\nAttention:\n\n    csv2md treats the first row as header line and requires them to be unique\n\nUsage:\n  csvtk csv2md [flags]\n\nFlags:\n  -a, --alignments string   comma separated alignments. e.g. -a l,c,c,c or -a c (default  l )\n  -w, --min-width int       min width (at least 3) (default 3)  Examples    give single alignment symbol  $ cat testdata/names.csv | csvtk csv2md -a left\nid |first_name|last_name|username\n:--|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |12  result:     id  first_name  last_name  username      11  Rob  Pike  rob    2  Ken  Thompson  ken    4  Robert  Griesemer  gri    1  Robert  Thompson  abc    NA  Robert  Abel  12       give alignment symbols of all fields  $ cat testdata/names.csv | csvtk csv2md -a c,l,l,l\nid |first_name|last_name|username\n:-:|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |123  result     id  first_name  last_name  username      11  Rob  Pike  rob    2  Ken  Thompson  ken    4  Robert  Griesemer  gri    1  Robert  Thompson  abc    NA  Robert  Abel  123", 
            "title": "csv2md"
        }, 
        {
            "location": "/usage/#xlsx2csv", 
            "text": "Usage  convert XLSX to CSV format\n\nUsage:\n  csvtk xlsx2csv [flags]\n\nFlags:\n  -h, --help                help for xlsx2csv\n  -a, --list-sheets         list all sheets\n  -i, --sheet-index int     Nth sheet to retrieve (default 1)\n  -n, --sheet-name string   sheet to retrieve  Examples    list all sheets  $ csvtk xlsx2csv ../testdata/accounts.xlsx -a\nindex   sheet\n1       names\n2       phones\n3       region    retrieve sheet by index  $ csvtk xlsx2csv ../testdata/accounts.xlsx -i 3\nname,region\nken,nowhere\ngri,somewhere\nshenwei,another\nThompson,there    retrieve sheet by name  $ csvtk xlsx2sv ../testdata/accounts.xlsx -n region\nname,region\nken,nowhere\ngri,somewhere\nshenwei,another\nThompson,there", 
            "title": "xlsx2csv"
        }, 
        {
            "location": "/usage/#head", 
            "text": "Usage  print first N records\n\nUsage:\n  csvtk head [flags]\n\nFlags:\n  -n, --number int   print first N records (default 10)  Examples    with header line  $ csvtk head -n 2 testdata/1.csv\nname,attr\nfoo,cool\nbar,handsome    no header line  $ csvtk head -H -n 2 testdata/1.csv\nname,attr\nfoo,cool", 
            "title": "head"
        }, 
        {
            "location": "/usage/#sample", 
            "text": "Usage  sampling by proportion\n\nUsage:\n  csvtk sample [flags]\n\nFlags:\n  -p, --proportion float   sample by proportion\n  -s, --rand-seed int      rand seed (default 11)  Examples  $ seq 100 | csvtk sample -H -p 0.5 | wc -l\n46\n\n$ seq 100 | csvtk sample -H -p 0.5 | wc -l\n46\n\n$ seq 100 | csvtk sample -H -p 0.1 | wc -l\n10\n\n$ seq 100 | csvtk sample -H -p 0.1 | wc -l\n10", 
            "title": "sample"
        }, 
        {
            "location": "/usage/#cut", 
            "text": "Usage  select parts of fields\n\nUsage:\n  csvtk cut [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB, or -f -columnA for unselect columnA\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -h, --help            help for cut\n  -i, --ignore-case     ignore case (column name)  Examples    data:  $ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"    Select columns by column index:  csvtk cut -f 1,2  $ cat testdata/names.csv | csvtk cut -f 1,2\nid,first_name\n11,Rob\n2,Ken\n4,Robert\n1,Robert\nNA,Robert    Select columns by column names:  csvtk cut -f first_name,username  $ cat testdata/names.csv | csvtk cut -f first_name,username\nfirst_name,username\nRob,rob\nKen,ken\nRobert,gri\nRobert,abc\nRobert,123    Unselect :    select 3+ columns:  csvtk cut -f -1,-2  $ cat testdata/names.csv | csvtk cut -f -1,-2\nlast_name,username\nPike,rob\nThompson,ken\nGriesemer,gri\nThompson,abc\nAbel,123    select columns except  first_name :  csvtk cut -f -first_name  $ cat testdata/names.csv | csvtk cut -f -first_name\nid,last_name,username\n11,Pike,rob\n2,Thompson,ken\n4,Griesemer,gri\n1,Thompson,abc\nNA,Abel,123      Fuzzy fields  using wildcard character,   csvtk cut -F -f \"*_name,username\"  $ cat testdata/names.csv | csvtk cut -F -f \"*_name,username\"\nfirst_name,last_name,username\nRob,Pike,rob\nKen,Thompson,ken\nRobert,Griesemer,gri\nRobert,Thompson,abc\nRobert,Abel,123    All fields:  csvtk cut -F -f \"*\"  (only works when all colnames are unique)  $ cat testdata/names.csv | csvtk cut -F -f \"*\"\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n1,Robert,Thompson,abc\nNA,Robert,Abel,123    Field ranges:    csvtk cut -f 2-4  for column 2,3,4  $ cat testdata/names.csv | csvtk cut -f 2-4\nfirst_name,last_name,username\nRob,Pike,rob\nKen,Thompson,ken\nRobert,Griesemer,gri\nRobert,Thompson,abc\nRobert,Abel,123    csvtk cut -f -3--1  for discarding column 1,2,3  $ cat testdata/names.csv | csvtk cut -f -3--1\nusername\nrob\nken\ngri\nabc\n123", 
            "title": "cut"
        }, 
        {
            "location": "/usage/#uniq", 
            "text": "Usage  unique data without sorting\n\nUsage:\n  csvtk uniq [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -i, --ignore-case     ignore case  Examples:    data:  $ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"    unique first_name (it removes rows with duplicated first_name)  $ cat testdata/names.csv | csvtk uniq -f first_name\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri    unique first_name, a more common way  $ cat testdata/names.csv | csvtk cut -f first_name | csvtk uniq -f 1\nfirst_name\nRob\nKen\nRobert", 
            "title": "uniq"
        }, 
        {
            "location": "/usage/#freq", 
            "text": "Usage  frequencies of selected fields\n\nUsage:\n  csvtk freq [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -i, --ignore-case     ignore case\n  -r, --reverse         reverse order while sorting\n  -n, --sort-by-freq    sort by frequency\n  -k, --sort-by-key     sort by key  Examples    one filed  $ cat testdata/names.csv | csvtk freq -f first_name | csvtk pretty\nfirst_name   frequency\nKen          1\nRob          1\nRobert       3    sort by frequency. you can also use  csvtk sort  with more sorting options  $ cat testdata/names.csv | csvtk freq -f first_name -n -r | csvtk pretty\nfirst_name   frequency\nRobert       3\nKen          1\nRob          1    sorty by key  $ cat testdata/names.csv | csvtk freq -f first_name -k | csvtk pretty\nfirst_name   frequency\nKen          1\nRob          1\nRobert       3    multiple fields  $ cat testdata/names.csv | csvtk freq -f first_name,last_name | csvtk pretty\nfirst_name   last_name   frequency\nRobert       Abel        1\nKen          Thompson    1\nRob          Pike        1\nRobert       Thompson    1\nRobert       Griesemer   1    data without header row  $ cat testdata/ testdata/digitals.tsv  | csvtk -t -H freq -f 1\n8       1\n1       1\n4       1\n7       1", 
            "title": "freq"
        }, 
        {
            "location": "/usage/#inter", 
            "text": "Usage  intersection of multiple files\n\nUsage:\n  csvtk inter [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -i, --ignore-case     ignore case  Examples:  $ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/region.csv\nname,region\nken,nowhere\ngri,somewhere\nshenwei,another\nThompson,there\n\n$ csvtk inter testdata/phones.csv testdata/region.csv\nusername\ngri\nken\nshenwei", 
            "title": "inter"
        }, 
        {
            "location": "/usage/#grep", 
            "text": "Usage  grep data by selected fields with patterns/regular expressions\n\nUsage:\n  csvtk grep [flags]\n\nFlags:\n  -f, --fields string         comma separated key fields, column name or index. e.g. -f 1-3 or -f id,id2 or -F -f  group*  (default  1 )\n  -F, --fuzzy-fields          using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -h, --help                  help for grep\n  -i, --ignore-case           ignore case\n  -v, --invert                invert match\n  -n, --line-number           print line number as the first column ( n )\n  -N, --no-highlight          no highlight\n  -p, --pattern strings       query pattern (multiple values supported)\n  -P, --pattern-file string   pattern files (one pattern per line)\n  -r, --use-regexp            patterns are regular expression\n      --verbose               verbose output  Examples  Matched parts will be  highlight    By exact keys  $ cat testdata/names.csv | csvtk grep -f last_name -p Pike -p Abel | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\nNA   Robert       Abel        123    By regular expression:  csvtk grep -f first_name -r -p Rob  $ cat testdata/names.csv | csvtk grep -f first_name -r -p Rob | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123    By pattern list:  csvtk grep -f first_name -P name_list.txt   Remore rows containing missing data (NA):  csvtk grep -F -f \"*\" -r -p \"^$\" -v  show line number $ cat names.csv | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n$ cat names.csv | csvtk grep -f first_name -r -i -p rob -n | csvtk pretty\nn   id   first_name   last_name   username\n1   11   Rob          Pike        rob\n3   4    Robert       Griesemer   gri\n4   1    Robert       Thompson    abc\n5   NA   Robert       Abel        123", 
            "title": "grep"
        }, 
        {
            "location": "/usage/#filter", 
            "text": "Usage  filter rows by values of selected fields with artithmetic expression\n\nUsage:\n  csvtk filter [flags]\n\nFlags:\n      --any             print record if any of the field satisfy the condition\n  -f, --filter string   filter condition. e.g. -f  age 12  or -f  1,3 =2  or -F -f  c*!=0 \n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -h, --help            help for filter\n  -n, --line-number     print line number as the first column ( n )  Examples    single field  $ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat testdata/names.csv | csvtk filter -f \"id 0\" | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc    multiple fields  $ cat  testdata/digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat  testdata/digitals.tsv | csvtk -t -H filter -f \"1-3 0\"\n4       5       6\n1       2       3\n8       1,000   4  using  --any  to print record if any of the field satisfy the condition  $  cat  testdata/digitals.tsv | csvtk -t -H filter -f \"1-3 0\" --any\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4    fuzzy fields  $  cat testdata/names.csv | csvtk filter -F -f \"i*!=0\"\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n1,Robert,Thompson,abc", 
            "title": "filter"
        }, 
        {
            "location": "/usage/#filter2", 
            "text": "Usage  filter rows by awk-like artithmetic/string expressions\n\nThe artithmetic/string expression is supported by:\n\n    https://github.com/Knetic/govaluate\n\nSupported operators and types:\n\n    Modifiers: + - / *   | ^ ** %    \n    Comparators:    =    = == != =~ !~\n    Logical ops: ||  \n    Numeric constants, as 64-bit floating point (12345.678)\n    String constants (single quotes: 'foobar')\n    Date constants (single quotes)\n    Boolean constants: true false\n    Parenthesis to control order of evaluation ( )\n    Arrays (anything separated by , within parenthesis: (1, 2, 'foo'))\n    Prefixes: ! - ~\n    Ternary conditional: ? :\n    Null coalescence: ??\n\nUsage:\n  csvtk filter2 [flags]\n\nFlags:\n  -f, --filter string   awk-like filter condition. e.g. '$age 12' or '$1   $3' or '$name== abc ' or '$1 % 2 == 0'\n  -h, --help            help for filter2\n  -n, --line-number     print line number as the first column ( n )  Examples:    filter rows with  id  greater than 3:  $ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n$ cat testdata/names.csv | csvtk filter2 -f '$id   3'\nid,first_name,last_name,username\n11,Rob,Pike,rob\n4,Robert,Griesemer,gri    Artithmetic and string expressions  $ cat testdata/names.csv | csvtk filter2 -f '$id   3 || $username==\"ken\"'\nid,first_name,last_name,username\n11,Rob,Pike,rob\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri    More artithmetic expressions  $ cat testdata/digitals.tsv\n4       5       6\n1       2       3\n7       8       0\n8       1,000   4\n\n$ cat testdata/digitals.tsv | csvtk filter2 -H -t -f '$1   2   $2 % 2 == 0'\n7       8       0\n8       1,000   4\n\n# comparison between fields and support\n$ cat testdata/digitals.tsv | csvtk filter2 -H -t -f '$2  = $3 || ( $1 / $2   0.5 )'\n4       5       6\n1       2       3\n7       8       0", 
            "title": "filter2"
        }, 
        {
            "location": "/usage/#join", 
            "text": "Usage  join 2nd and later files to the first file by selected fields.\n\nMultiple keys supported, but the orders are ignored.\n\nUsage:\n  csvtk join [flags]\n\nFlags:\n  -f, --fields string    Semicolon separated key fields of all files, if given one, we think all the files have the same key columns. Fields of different files should be separated by  ; , e.g -f  1;2  or -f  A,B;C,D  or -f id (default  1 )\n      --fill string      fill content for unmatched data\n  -F, --fuzzy-fields     using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -i, --ignore-case      ignore case\n  -k, --keep-unmatched   keep unmatched data of the first file  Examples:    data  $ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/region.csv\nname,region\nken,nowhere\ngri,somewhere\nshenwei,another\nThompson,there    All files have same key column:  csvtk join -f id file1.csv file2.csv  $ csvtk join -f 1 testdata/phones.csv testdata/region.csv\nusername,phone,region\ngri,11111,somewhere\nken,22222,nowhere\nshenwei,999999,another    keep unmatched  $ csvtk join -f 1 testdata/phones.csv testdata/region.csv --keep-unmatched\nusername,phone,region\ngri,11111,somewhere\nrob,12345,\nken,22222,nowhere\nshenwei,999999,another    keep unmatched and fill with something  $ csvtk join -f 1 testdata/phones.csv testdata/region.csv --keep-unmatched --fill NA\nusername,phone,region\ngri,11111,somewhere\nrob,12345,NA\nken,22222,nowhere\nshenwei,999999,another    Files have different key columns:  csvtk join -f \"username;username;name\" testdata/names.csv phone.csv adress.csv -k .  Note that fields are separated with  ;  not  , .  $ csvtk join -f \"username;name\"  testdata/phones.csv testdata/region.csv\nusername,phone,region\ngri,11111,somewhere\nken,22222,nowhere\nshenwei,999999,another    The 2nd or later files have entries with same ID:  $ cat testdata/1.csv\nname,attr\nfoo,cool\nbar,handsome\nbob,beutiful\n\n$ cat testdata/2.csv\nname,major\nbar,bioinformatics\nbob,microbiology\nbob,computer science\n\n$ cat testdata/3.csv\nid,name,hobby\n1,bar,baseball\n2,bob,basketball\n3,foo,football\n4,wei,programming\n\n$ csvtk join testdata/1.csv testdata/2.csv  | csvtk pretty\nname   attr       major\nbar    handsome   bioinformatics\nbob    beutiful   microbiology\nbob    beutiful   computer science\n\n$ csvtk join testdata/{1,2,3}.csv -f name -k | csvtk pretty\nname   attr       major               id   hobby\nfoo    cool                           3    football\nbar    handsome   bioinformatics      1    baseball\nbob    beutiful   microbiology        2    basketball\nbob    beutiful   computer science    2    basketball\n\n$ csvtk join testdata/{3,1,2}.csv -f name -k | csvtk pretty\nid   name   hobby         attr       major\n1    bar    baseball      handsome   bioinformatics\n2    bob    basketball    beutiful   computer science\n2    bob    basketball    beutiful   computer science\n3    foo    football      cool\n4    wei    programming", 
            "title": "join"
        }, 
        {
            "location": "/usage/#rename", 
            "text": "Usage  rename column names\n\nUsage:\n  csvtk rename [flags]\n\nFlags:\n  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -n, --names string    comma separated new names  Examples:   Setting new names:  csvtk rename -f A,B -n a,b  or  csvtk rename -f 1-3 -n a,b,c $ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/phones.csv | csvtk rename -f 1 -n \u59d3\u540d\n\u59d3\u540d,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999", 
            "title": "rename"
        }, 
        {
            "location": "/usage/#rename2", 
            "text": "Usage  rename column names by regular expression\n\nUsage:\n  csvtk rename2 [flags]\n\nFlags:  Examples:   replacing with original names by regular express:  cat testdata/c.csv | csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_$1'  for adding prefix to all column names. $ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/phones.csv | csvtk rename2 -F -f \"*\" -p \"(.*)\" -r 'prefix_${1}_suffix'\nprefix_username_suffix,prefix_phone_suffix\ngri,11111\nrob,12345\nken,22222\nshenwei,999999", 
            "title": "rename2"
        }, 
        {
            "location": "/usage/#replace", 
            "text": "Usage  replace data of selected fields by regular expression\n\nNote that the replacement supports capture variables.\ne.g. $1 represents the text of the first submatch.\nATTENTION: use SINGLE quote NOT double quotes in *nix OS.\n\nExamples: Adding space to all bases.\n\n    csvtk replace -p  (.)  -r '$1 ' -s\n\nOr use the \\ escape character.\n\n    csvtk replace -p  (.)  -r  \\$1   -s\n\nmore on: http://shenwei356.github.io/csvtk/usage/#replace\n\nSpecial replacement symbols:\n\n        {nr}    Record number, starting from 1\n        {kv}    Corresponding value of the key (captured variable $n) by key-value file,\n                n can be specified by flag -I (--key-capt-idx) (default: 1)\n\nUsage:\n  csvtk replace [flags]\n\nFlags:\n  -f, --fields string          select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -F, --fuzzy-fields           using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -i, --ignore-case            ignore case\n  -K, --keep-key               keep the key as value when no value found for the key\n  -I, --key-capt-idx int       capture variable index of key (1-based) (default 1)\n      --key-miss-repl string   replacement for key with no corresponding value\n  -k, --kv-file string         tab-delimited key-value file for replacing key with value when using  {kv}  in -r (--replacement)\n  -p, --pattern string         search regular expression\n  -r, --replacement string     replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: for *nix OS, use SINGLE quote NOT double quotes or use the \\ escape character. Record number is also supported by  {nr} .use ${1} instead of $1 when {kv} given!  Examples   remove Chinese charactors:   csvtk replace -F -f \"*_name\" -p \"\\p{Han}+\" -r \"\"  replace by key-value files:  csvtk replace -f 1 -p \"(.+)\" -r \"value of $1 is {kv}\" -k kv.tsv $ cat data.tsv\nname    id\nA       ID001\nB       ID002\nC       ID004\n\n$ cat alias.tsv\n001     Tom\n002     Bob\n003     Jim\n\n$ csvtk replace -t -f 2  -p \"ID(.+)\" -r \"N: {nr}, alias: {kv}\" -k alias.tsv  data.tsv\n[INFO] read key-value file: alias.tsv\n[INFO] 3 pairs of key-value loaded\nname    id\nA       N: 1, alias: Tom\nB       N: 2, alias: Bob\nC       N: 3, alias: 004", 
            "title": "replace"
        }, 
        {
            "location": "/usage/#mutate", 
            "text": "Usage  create new column from selected fields by regular expression\n\nUsage:\n  csvtk mutate [flags]\n\nFlags:\n  -f, --fields string    select only these fields. e.g -f 1,2 or -f columnA,columnB (default  1 )\n  -i, --ignore-case      ignore case\n      --na               for unmatched data, use blank instead of original data\n  -n, --name string      new column name\n  -p, --pattern string   search regular expression with capture bracket. e.g. (default  ^(.+)$ )  Examples   In default, copy a column:  csvtk mutate -f id -n newname  extract prefix of data as group name using regular expression (get \"A\" from \"A.1\" as group name):\n   csvtk mutate -f sample -n group -p \"^(.+?)\\.\"  get the first letter as new column $ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ cat testdata/phones.csv | csvtk mutate -f username -p \"^(\\w)\" -n first_letter\nusername,phone,first_letter\ngri,11111,g\nrob,12345,r\nken,22222,k\nshenwei,999999,s", 
            "title": "mutate"
        }, 
        {
            "location": "/usage/#mutate2", 
            "text": "Usage  create new column from selected fields by awk-like artithmetic/string expressions\n\nThe artithmetic/string expression is supported by:\n\n    https://github.com/Knetic/govaluate\n\nSupported operators and types:\n\n    Modifiers: + - / *   | ^ ** %    \n    Comparators:    =    = == != =~ !~\n    Logical ops: ||  \n    Numeric constants, as 64-bit floating point (12345.678)\n    String constants (single quotes: 'foobar')\n    Date constants (single quotes)\n    Boolean constants: true false\n    Parenthesis to control order of evaluation ( )\n    Arrays (anything separated by , within parenthesis: (1, 2, 'foo'))\n    Prefixes: ! - ~\n    Ternary conditional: ? :\n    Null coalescence: ??\n\nUsage:\n  csvtk mutate2 [flags]\n\nFlags:\n  -L, --digits int          number of digits after the dot (default 2)\n  -e, --expression string   artithmetic/string expressions. e.g. '$1 + $2', '$a / $b', ' $1   100 ?  big  :  small  '\n  -h, --help                help for mutate2\n  -n, --name string         new column name  Example    Math  $ cat testdata/digitals.tsv | csvtk mutate2 -t -H -e '$1 + $3' -L 0\n4       5       6       10\n1       2       3       4\n7       8       0       7\n8       1,000   4       12    Bool  $ cat testdata/digitals.tsv | csvtk mutate2 -t -H -e '$1   5'\n4       5       6       false\n1       2       3       false\n7       8       0       true\n8       1,000   4       true    Ternary conditional  $ cat testdata/digitals.tsv | csvtk mutate2 -t -H -e '$1   5 ? \"big\" : \"small\" '\n4       5       6       small\n1       2       3       small\n7       8       0       big\n8       1,000   4       big", 
            "title": "mutate2"
        }, 
        {
            "location": "/usage/#gather", 
            "text": "Usage  gather columns into key-value pairs\n\nUsage:\n  csvtk gather [flags]\n\nFlags:\n  -f, --fields string   fields for gathering. e.g -f 1,2 or -f columnA,columnB, or -f -columnA for unselect columnA\n  -F, --fuzzy-fields    using fuzzy fields, e.g., -F -f  *name  or -F -f  id123* \n  -k, --key string      name of key column to create in output\n  -v, --value string    name of value column to create in output  Examples:  $ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\n\n$ cat testdata/names.csv | csvtk gather -k item -v value -f -1\nid,item,value\n11,first_name,Rob\n11,last_name,Pike\n11,username,rob\n2,first_name,Ken\n2,last_name,Thompson\n2,username,ken\n4,first_name,Robert\n4,last_name,Griesemer\n4,username,gri\n1,first_name,Robert\n1,last_name,Thompson\n1,username,abc\nNA,first_name,Robert\nNA,last_name,Abel\nNA,username,123", 
            "title": "gather"
        }, 
        {
            "location": "/usage/#sort", 
            "text": "Usage  sort by selected fields\n\nUsage:\n  csvtk sort [flags]\n\nFlags:\n  -k, --keys value   keys. sort type supported,  n  for number and  r  for reverse. e.g.  -k 1  or  -k A:r  or  -k 1:nr -k 2  (default [1])  Examples    data  $ cat testdata/names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"    By single column :  csvtk sort -k 1  or  csvtk sort -k last_name    in alphabetical order  $ cat testdata/names.csv | csvtk sort -k first_name\nid,first_name,last_name,username\n2,Ken,Thompson,ken\n11,Rob,Pike,rob\nNA,Robert,Abel,123\n1,Robert,Thompson,abc\n4,Robert,Griesemer,gri    in reversed alphabetical order  $ cat testdata/names.csv | csvtk sort -k first_name:r\nid,first_name,last_name,username\nNA,Robert,Abel,123\n1,Robert,Thompson,abc\n4,Robert,Griesemer,gri\n11,Rob,Pike,rob\n2,Ken,Thompson,ken    in numerical order  $ cat testdata/names.csv | csvtk sort -k id:n\nid,first_name,last_name,username\nNA,Robert,Abel,123\n1,Robert,Thompson,abc\n2,Ken,Thompson,ken\n4,Robert,Griesemer,gri\n11,Rob,Pike,rob      By multiple columns:  csvtk sort -k 1,2  or  csvtk sort -k 1 -k 2  or  csvtk sort -k last_name,age  # by first_name and then last_name\n$ cat testdata/names.csv | csvtk sort -k first_name -k last_name\nid,first_name,last_name,username\n2,Ken,Thompson,ken\n11,Rob,Pike,rob\nNA,Robert,Abel,123\n4,Robert,Griesemer,gri\n1,Robert,Thompson,abc\n\n# by first_name and then ID\n$ cat testdata/names.csv | csvtk sort -k first_name -k id:n\nid,first_name,last_name,username\n2,Ken,Thompson,ken\n11,Rob,Pike,rob\nNA,Robert,Abel,123\n1,Robert,Thompson,abc\n4,Robert,Griesemer,gri    By  user-defined order  # user-defined order/level\n$ cat testdata/size_level.txt\ntiny\nmini\nsmall\nmedium\nbig\n\n# original data\n$ cat testdata/size.csv\nid,size\n1,Huge\n2,Tiny\n3,Big\n4,Small\n5,Medium\n\n$ csvtk sort -k 2:u -i -L 2:testdata/size_level.txt testdata/size.csv\nid,size\n2,Tiny\n4,Small\n5,Medium\n3,Big\n1,Huge", 
            "title": "sort"
        }, 
        {
            "location": "/usage/#plot", 
            "text": "Usage  plot common figures\n\nNotes:\n\n  1. Output file can be set by flag -o/--out-file.\n  2. File format is determined by the out file suffix.\n     Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n  3. If flag -o/--out-file not set (default), image is written to stdout,\n     you can display the image by pipping to  display  command of Imagemagic\n     or just redirect to file.\n\nUsage:\n  csvtk plot [command]\n\nAvailable Commands:\n  box         plot boxplot\n  hist        plot histogram\n  line        line plot and scatter plot\n\nFlags:\n      --axis-width float     axis width (default 1.5)\n  -f, --data-field string    column index or column name of data (default  1 )\n      --format string        image format for stdout when flag -o/--out-file not given. available values: eps, jpg|jpeg, pdf, png, svg, and tif|tiff. (default  png )\n  -g, --group-field string   column index or column name of group\n      --height float         Figure height (default 4.5)\n      --label-size int       label font size (default 14)\n      --tick-width float     axis tick width (default 1.5)\n      --title string         Figure title\n      --title-size int       title font size (default 16)\n      --width float          Figure width (default 6)\n      --x-max string         maximum value of X axis\n      --x-min string         minimum value of X axis\n      --xlab string          x label text\n      --y-max string         maximum value of Y axis\n      --y-min string         minimum value of Y axis\n      --ylab string          y label text  Note that most of the flags of  plot  are global flags of the subcommands hist ,  box  and  line  Notes of image output   Output file can be set by flag -o/--out-file.  File format is determined by the out file suffix.\n   Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff  If flag -o/--out-file not set (default), image is written to stdout,\n   you can display the image by pipping to \"display\" command of Imagemagic\n   or just redirect to file.", 
            "title": "plot"
        }, 
        {
            "location": "/usage/#plot-hist", 
            "text": "Usage  plot histogram\n\nNotes:\n\n  1. Output file can be set by flag -o/--out-file.\n  2. File format is determined by the out file suffix.\n     Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n  3. If flag -o/--out-file not set (default), image is written to stdout,\n     you can display the image by pipping to  display  command of Imagemagic\n     or just redirect to file.\n\nUsage:\n  csvtk plot hist [flags]\n\nFlags:\n      --bins int          number of bins (default 50)\n      --color-index int   color index, 1-7 (default 1)  Examples    example data  $ zcat testdata/grouped_data.tsv.gz | head -n 5 | csvtk -t pretty\nGroup     Length   GC Content\nGroup A   97       57.73\nGroup A   95       49.47\nGroup A   97       49.48\nGroup A   100      51.00    plot histogram with data of the second column: csvtk -t plot hist testdata/grouped_data.tsv.gz -f 2 --title Histogram -o histogram.png     You can also write image to stdout and pipe to \"display\" command of Imagemagic: csvtk -t plot hist testdata/grouped_data.tsv.gz -f 2 | display", 
            "title": "plot hist"
        }, 
        {
            "location": "/usage/#plot-box", 
            "text": "Usage  plot boxplot\n\nNotes:\n\n  1. Output file can be set by flag -o/--out-file.\n  2. File format is determined by the out file suffix.\n     Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n  3. If flag -o/--out-file not set (default), image is written to stdout,\n     you can display the image by pipping to  display  command of Imagemagic\n     or just redirect to file.\n\nUsage:\n  csvtk plot box [flags]\n\nFlags:\n      --box-width float   box width\n      --horiz             horize box plot  Examples    plot boxplot with data of the \"GC Content\" (third) column,\ngroup information is the \"Group\" column. csvtk -t plot box testdata/grouped_data.tsv.gz -g \"Group\" -f \"GC Content\"  --width 3 --title \"Box plot   boxplot.png\"     plot horiz boxplot with data of the \"Length\" (second) column,\ngroup information is the \"Group\" column. csvtk -t plot box testdata/grouped_data.tsv.gz -g \"Group\" -f \"Length\"  --height 3 --width 5 --horiz --title \"Horiz box plot   boxplot2.png\"", 
            "title": "plot box"
        }, 
        {
            "location": "/usage/#plot-line", 
            "text": "Usage  line plot and scatter plot\n\nNotes:\n\n  1. Output file can be set by flag -o/--out-file.\n  2. File format is determined by the out file suffix.\n     Supported formats: eps, jpg|jpeg, pdf, png, svg, and tif|tiff\n  3. If flag -o/--out-file not set (default), image is written to stdout,\n     you can display the image by pipping to  display  command of Imagemagic\n     or just redirect to file.\n\nUsage:\n  csvtk plot line [flags]\n\nFlags:\n  -x, --data-field-x string   column index or column name of X for command line\n  -y, --data-field-y string   column index or column name of Y for command line\n      --legend-left           locate legend along the left edge of the plot\n      --legend-top            locate legend along the top edge of the plot\n      --line-width float      line width (default 1.5)\n      --point-size float      point size (default 3)\n      --scatter               only plot points  Examples    example data  $ head -n 5 testdata/xy.tsv\nGroup   X       Y\nA       0       1\nA       1       1.3\nA       1.5     1.5\nA       2.0     2    plot line plot with X-Y data csvtk -t plot line testdata/xy.tsv -x X -y Y -g Group --title \"Line plot\"   lineplot.png     plot scatter csvtk -t plot line testdata/xy.tsv -x X -y Y -g Group --title \"Scatter\" --scatter   lineplot.png", 
            "title": "plot line"
        }, 
        {
            "location": "/usage/#genautocomplete", 
            "text": "Usage  generate shell autocompletion script\n\nNote: The current version supports Bash only.\nThis should work for *nix systems with Bash installed.\n\nHowto:\n\n1. run: csvtk genautocomplete\n\n2. create and edit ~/.bash_completion file if you don't have it.\n\n        nano ~/.bash_completion\n\n   add the following:\n\n        for bcfile in ~/.bash_completion.d/* ; do\n          . $bcfile\n        done\n\nUsage:\n  csvtk genautocomplete [flags]\n\nFlags:\n      --file string   autocompletion file (default  /home/shenwei/.bash_completion.d/csvtk.sh )\n  -h, --help          help for genautocomplete\n      --type string   autocompletion type (currently only bash supported) (default  bash )   \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "genautocomplete"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Tutorial\n\n\nAnalyzing OTU table\n\n\nData\n\n\nHere is a mock OTU table from 16S rRNA sequencing result.\nColumns are sample IDs in format of \"GROUP.ID\"\n\n\n$ cat otu_table.csv\nTaxonomy,A.1,A.2,A.3,B.1,B.2,B.3,C.1,C.2\nProteobacteria,.13,.29,.13,.16,.13,.22,.30,.23\nFirmicutes,.42,.06,.49,.41,.55,.41,.32,.38\nBacteroidetes,.19,.62,.12,.33,.16,.29,.34,.35\nDeferribacteres,.17,.00,.24,.01,.01,.01,.01,.01\n\n\n\nWhat a mess! Let's make it prettier!\n\n\n$ csvtk pretty otu_table.csv\nTaxonomy          A.1   A.2   A.3   B.1   B.2   B.3   C.1   C.2\nProteobacteria    .13   .29   .13   .16   .13   .22   .30   .23\nFirmicutes        .42   .06   .49   .41   .55   .41   .32   .38\nBacteroidetes     .19   .62   .12   .33   .16   .29   .34   .35\nDeferribacteres   .17   .00   .24   .01   .01   .01   .01   .01\n\n\n\nSteps\n\n\n\n\n\n\nCounting\n\n\n$ csvtk stat otu_table.csv\nfile            num_cols   num_rows\notu_table.csv          9          4\n\n\n\n\n\n\n\nColumn names\n\n\n$ csvtk headers otu_table.csv\n# otu_table.csv\n1       Taxonomy\n2       A.1\n3       A.2\n4       A.3\n5       B.1\n6       B.2\n7       B.3\n8       C.1\n9       C.2\n\n\n\n\n\n\n\nConvert to tab-delimited table\n\n\n$ csvtk csv2tab otu_table.csv\nTaxonomy        A.1     A.2     A.3     B.1     B.2     B.3     C.1     C.2\nProteobacteria  .13     .29     .13     .16     .13     .22     .30     .23\nFirmicutes      .42     .06     .49     .41     .55     .41     .32     .38\nBacteroidetes   .19     .62     .12     .33     .16     .29     .34     .35\nDeferribacteres .17     .00     .24     .01     .01     .01     .01     .01\n\n\n\n\n\n\n\nExtract data of group A and B and save to file \n-o otu_table.gAB.csv\n\n\n$ csvtk cut -F -f \"Taxonomy,A.*,B.*\" otu_table.csv -o otu_table.gAB.csv\n\n$ csvtk pretty otu_table.gAB.csv\nTaxonomy          A.1   A.2   A.3   B.1   B.2   B.3\nProteobacteria    .13   .29   .13   .16   .13   .22\nFirmicutes        .42   .06   .49   .41   .55   .41\nBacteroidetes     .19   .62   .12   .33   .16   .29\nDeferribacteres   .17   .00   .24   .01   .01   .01\n\n\n\n\n\n\n\nSearch some rows by fields. Matched parts will be highlighted as red\n\n\n$ csvtk grep -f Taxonomy -r -p \"tes\" otu_table.gAB.csv -T\n\n\n\nResult:\n\n\n\n\n\n\n\n\nTranspose\n\n\n$ csvtk transpose otu_table.gAB.csv -o otu_table.gAB.t.csv\n\n$ csvtk pretty otu_table.gAB.t.csv\nTaxonomy   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres\nA.1        .13              .42          .19             .17\nA.2        .29              .06          .62             .00\nA.3        .13              .49          .12             .24\nB.1        .16              .41          .33             .01\nB.2        .13              .55          .16             .01\nB.3        .22              .41          .29             .01\n\n\n\n\n\n\n\nRename name of the first column\n\n\n$ csvtk rename -f 1 -n \"sample\" otu_table.gAB.t.csv -o otu_table.gAB.t.r.csv\n\n$ csvtk pretty otu_table.gAB.t.r.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres\nA.1      .13              .42          .19             .17\nA.2      .29              .06          .62             .00\nA.3      .13              .49          .12             .24\nB.1      .16              .41          .33             .01\nB.2      .13              .55          .16             .01\nB.3      .22              .41          .29             .01\n\n\n\n\n\n\n\nAdd group column\n\n\n$ csvtk mutate -p \"(.+?)\\.\" -n group otu_table.gAB.t.r.csv -o otu_table2.csv\n\n$ csvtk pretty otu_table2.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   group\nA.1      .13              .42          .19             .17               A\nA.2      .29              .06          .62             .00               A\nA.3      .13              .49          .12             .24               A\nB.1      .16              .41          .33             .01               B\nB.2      .13              .55          .16             .01               B\nB.3      .22              .41          .29             .01               B\n\n\n\n\n\n\n\nRename groups:\n\n\n$ csvtk replace -f group -p \"A\" -r \"Ctrl\" otu_table2.csv | csvtk replace -f group -p \"B\" -r \"Treatment\" \n otu_table3.csv\n\n$ csvtk pretty -s \" \" otu_table3.csv\nsample Proteobacteria Firmicutes Bacteroidetes Deferribacteres group\nA.1    .13            .42        .19           .17             Ctrl\nA.2    .29            .06        .62           .00             Ctrl\nA.3    .13            .49        .12           .24             Ctrl\nB.1    .16            .41        .33           .01             Treatment\nB.2    .13            .55        .16           .01             Treatment\nB.3    .22            .41        .29           .01             Treatment\n\n\n\n\n\n\n\nStatistics of digital data\n\n\n$ csvtk stat2 -f 2-5 otu_table3.csv\nfield             num    sum    min    max   mean   stdev\nProteobacteria      6   1.06   0.13   0.29   0.18    0.07\nFirmicutes          6   2.34   0.06   0.55   0.39    0.17\nBacteroidetes       6   1.71   0.12   0.62   0.28    0.18\nDeferribacteres     6   0.44      0   0.24   0.07     0.1\n\n\n\nPlease don't be supprised at the \nsum\n, it's a mock otu table...\n\n\n\n\n\n\nSort by abundance of \nProteobacteria\n in descending order.\n\n\n$ csvtk sort -k Proteobacteria:nr otu_table3.csv | csvtk pretty -s \"  \"\nsample  Proteobacteria  Firmicutes  Bacteroidetes  Deferribacteres  group\nA.2     .29             .06         .62            .00              Ctrl\nB.3     .22             .41         .29            .01              Treatment\nB.1     .16             .41         .33            .01              Treatment\nB.2     .13             .55         .16            .01              Treatment\nA.3     .13             .49         .12            .24              Ctrl\nA.1     .13             .42         .19            .17              Ctrl\n\n\n\n\n\n\n\nSort by abundance of \nProteobacteria\n in descending order and \nFirmicutes\n in ascending order\n\n\n$ csvtk sort -k Proteobacteria:nr -k Firmicutes:n otu_table3.csv | csvtk pretty -s \"  \"\nsample  Proteobacteria  Firmicutes  Bacteroidetes  Deferribacteres  group\nA.2     .29             .06         .62            .00              Ctrl\nB.3     .22             .41         .29            .01              Treatment\nB.1     .16             .41         .33            .01              Treatment\nA.1     .13             .42         .19            .17              Ctrl\nA.3     .13             .49         .12            .24              Ctrl\nB.2     .13             .55         .16            .01              Treatment\n\n\n\n\n\n\n\nFilter samples with abundance greater than 0 in all taxons (columns except for sample and group, you can also use \n-f \"2-5\n0\"\n).\n\n\n$ cat otu_table3.csv | csvtk filter -f \"2-5\n0\" | csvtk pretty -s \"  \"   \nsample  Proteobacteria  Firmicutes  Bacteroidetes  Deferribacteres  group\nA.1     .13             .42         .19            .17              Ctrl\nA.3     .13             .49         .12            .24              Ctrl\nB.1     .16             .41         .33            .01              Treatment\nB.2     .13             .55         .16            .01              Treatment\nB.3     .22             .41         .29            .01              Treatment\n\n\n\n\n\n\n\nMost of the time, we may want to remove samples with abundance of 0 in all taxons.\n\n\n$ cat otu_table3.csv | csvtk filter -f \"2-5\n0\" --any | csvtk pretty -s \"  \"\nsample  Proteobacteria  Firmicutes  Bacteroidetes  Deferribacteres  group\nA.1     .13             .42         .19            .17              Ctrl\nA.2     .29             .06         .62            .00              Ctrl\nA.3     .13             .49         .12            .24              Ctrl\nB.1     .16             .41         .33            .01              Treatment\nB.2     .13             .55         .16            .01              Treatment\nB.3     .22             .41         .29            .01              Treatment\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#tutorial", 
            "text": "", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#analyzing-otu-table", 
            "text": "", 
            "title": "Analyzing OTU table"
        }, 
        {
            "location": "/tutorial/#data", 
            "text": "Here is a mock OTU table from 16S rRNA sequencing result.\nColumns are sample IDs in format of \"GROUP.ID\"  $ cat otu_table.csv\nTaxonomy,A.1,A.2,A.3,B.1,B.2,B.3,C.1,C.2\nProteobacteria,.13,.29,.13,.16,.13,.22,.30,.23\nFirmicutes,.42,.06,.49,.41,.55,.41,.32,.38\nBacteroidetes,.19,.62,.12,.33,.16,.29,.34,.35\nDeferribacteres,.17,.00,.24,.01,.01,.01,.01,.01  What a mess! Let's make it prettier!  $ csvtk pretty otu_table.csv\nTaxonomy          A.1   A.2   A.3   B.1   B.2   B.3   C.1   C.2\nProteobacteria    .13   .29   .13   .16   .13   .22   .30   .23\nFirmicutes        .42   .06   .49   .41   .55   .41   .32   .38\nBacteroidetes     .19   .62   .12   .33   .16   .29   .34   .35\nDeferribacteres   .17   .00   .24   .01   .01   .01   .01   .01", 
            "title": "Data"
        }, 
        {
            "location": "/tutorial/#steps", 
            "text": "Counting  $ csvtk stat otu_table.csv\nfile            num_cols   num_rows\notu_table.csv          9          4    Column names  $ csvtk headers otu_table.csv\n# otu_table.csv\n1       Taxonomy\n2       A.1\n3       A.2\n4       A.3\n5       B.1\n6       B.2\n7       B.3\n8       C.1\n9       C.2    Convert to tab-delimited table  $ csvtk csv2tab otu_table.csv\nTaxonomy        A.1     A.2     A.3     B.1     B.2     B.3     C.1     C.2\nProteobacteria  .13     .29     .13     .16     .13     .22     .30     .23\nFirmicutes      .42     .06     .49     .41     .55     .41     .32     .38\nBacteroidetes   .19     .62     .12     .33     .16     .29     .34     .35\nDeferribacteres .17     .00     .24     .01     .01     .01     .01     .01    Extract data of group A and B and save to file  -o otu_table.gAB.csv  $ csvtk cut -F -f \"Taxonomy,A.*,B.*\" otu_table.csv -o otu_table.gAB.csv\n\n$ csvtk pretty otu_table.gAB.csv\nTaxonomy          A.1   A.2   A.3   B.1   B.2   B.3\nProteobacteria    .13   .29   .13   .16   .13   .22\nFirmicutes        .42   .06   .49   .41   .55   .41\nBacteroidetes     .19   .62   .12   .33   .16   .29\nDeferribacteres   .17   .00   .24   .01   .01   .01    Search some rows by fields. Matched parts will be highlighted as red  $ csvtk grep -f Taxonomy -r -p \"tes\" otu_table.gAB.csv -T  Result:     Transpose  $ csvtk transpose otu_table.gAB.csv -o otu_table.gAB.t.csv\n\n$ csvtk pretty otu_table.gAB.t.csv\nTaxonomy   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres\nA.1        .13              .42          .19             .17\nA.2        .29              .06          .62             .00\nA.3        .13              .49          .12             .24\nB.1        .16              .41          .33             .01\nB.2        .13              .55          .16             .01\nB.3        .22              .41          .29             .01    Rename name of the first column  $ csvtk rename -f 1 -n \"sample\" otu_table.gAB.t.csv -o otu_table.gAB.t.r.csv\n\n$ csvtk pretty otu_table.gAB.t.r.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres\nA.1      .13              .42          .19             .17\nA.2      .29              .06          .62             .00\nA.3      .13              .49          .12             .24\nB.1      .16              .41          .33             .01\nB.2      .13              .55          .16             .01\nB.3      .22              .41          .29             .01    Add group column  $ csvtk mutate -p \"(.+?)\\.\" -n group otu_table.gAB.t.r.csv -o otu_table2.csv\n\n$ csvtk pretty otu_table2.csv\nsample   Proteobacteria   Firmicutes   Bacteroidetes   Deferribacteres   group\nA.1      .13              .42          .19             .17               A\nA.2      .29              .06          .62             .00               A\nA.3      .13              .49          .12             .24               A\nB.1      .16              .41          .33             .01               B\nB.2      .13              .55          .16             .01               B\nB.3      .22              .41          .29             .01               B    Rename groups:  $ csvtk replace -f group -p \"A\" -r \"Ctrl\" otu_table2.csv | csvtk replace -f group -p \"B\" -r \"Treatment\"   otu_table3.csv\n\n$ csvtk pretty -s \" \" otu_table3.csv\nsample Proteobacteria Firmicutes Bacteroidetes Deferribacteres group\nA.1    .13            .42        .19           .17             Ctrl\nA.2    .29            .06        .62           .00             Ctrl\nA.3    .13            .49        .12           .24             Ctrl\nB.1    .16            .41        .33           .01             Treatment\nB.2    .13            .55        .16           .01             Treatment\nB.3    .22            .41        .29           .01             Treatment    Statistics of digital data  $ csvtk stat2 -f 2-5 otu_table3.csv\nfield             num    sum    min    max   mean   stdev\nProteobacteria      6   1.06   0.13   0.29   0.18    0.07\nFirmicutes          6   2.34   0.06   0.55   0.39    0.17\nBacteroidetes       6   1.71   0.12   0.62   0.28    0.18\nDeferribacteres     6   0.44      0   0.24   0.07     0.1  Please don't be supprised at the  sum , it's a mock otu table...    Sort by abundance of  Proteobacteria  in descending order.  $ csvtk sort -k Proteobacteria:nr otu_table3.csv | csvtk pretty -s \"  \"\nsample  Proteobacteria  Firmicutes  Bacteroidetes  Deferribacteres  group\nA.2     .29             .06         .62            .00              Ctrl\nB.3     .22             .41         .29            .01              Treatment\nB.1     .16             .41         .33            .01              Treatment\nB.2     .13             .55         .16            .01              Treatment\nA.3     .13             .49         .12            .24              Ctrl\nA.1     .13             .42         .19            .17              Ctrl    Sort by abundance of  Proteobacteria  in descending order and  Firmicutes  in ascending order  $ csvtk sort -k Proteobacteria:nr -k Firmicutes:n otu_table3.csv | csvtk pretty -s \"  \"\nsample  Proteobacteria  Firmicutes  Bacteroidetes  Deferribacteres  group\nA.2     .29             .06         .62            .00              Ctrl\nB.3     .22             .41         .29            .01              Treatment\nB.1     .16             .41         .33            .01              Treatment\nA.1     .13             .42         .19            .17              Ctrl\nA.3     .13             .49         .12            .24              Ctrl\nB.2     .13             .55         .16            .01              Treatment    Filter samples with abundance greater than 0 in all taxons (columns except for sample and group, you can also use  -f \"2-5 0\" ).  $ cat otu_table3.csv | csvtk filter -f \"2-5 0\" | csvtk pretty -s \"  \"   \nsample  Proteobacteria  Firmicutes  Bacteroidetes  Deferribacteres  group\nA.1     .13             .42         .19            .17              Ctrl\nA.3     .13             .49         .12            .24              Ctrl\nB.1     .16             .41         .33            .01              Treatment\nB.2     .13             .55         .16            .01              Treatment\nB.3     .22             .41         .29            .01              Treatment    Most of the time, we may want to remove samples with abundance of 0 in all taxons.  $ cat otu_table3.csv | csvtk filter -f \"2-5 0\" --any | csvtk pretty -s \"  \"\nsample  Proteobacteria  Firmicutes  Bacteroidetes  Deferribacteres  group\nA.1     .13             .42         .19            .17              Ctrl\nA.2     .29             .06         .62            .00              Ctrl\nA.3     .13             .49         .12            .24              Ctrl\nB.1     .16             .41         .33            .01              Treatment\nB.2     .13             .55         .16            .01              Treatment\nB.3     .22             .41         .29            .01              Treatment     \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//csvtk.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Steps"
        }, 
        {
            "location": "/chinese/", 
            "text": "csvtk - \u8de8\u5e73\u53f0\u3001\u9ad8\u6548\u3001\u5b9e\u7528\u7684CSV/TSV\u547d\u4ee4\u884c\u5de5\u5177\n\n\n\u5982\u540c\u751f\u7269\u4fe1\u606f\u9886\u57df\u4e2d\u7684FASTA/Q\u683c\u5f0f\u4e00\u6837\uff0cCSV/TSV\u4f5c\u4e3a\u8ba1\u7b97\u673a\u3001\u6570\u636e\u79d1\u5b66\u548c\u751f\u7269\u4fe1\u606f\u7684\u57fa\u672c\u683c\u5f0f\uff0c\n\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\u3002\u5e38\u7528\u7684\u5904\u7406\u8f6f\u4ef6\u5305\u62ec\uff1a\n\n\n\n\n\u4ee5\u5fae\u8f6fExcel\u4e3a\u4ee3\u8868\u7684\u7535\u5b50\u8868\u683c\u8f6f\u4ef6\n\n\nNotepad++/SublimeText\u7b49\u6587\u672c\u7f16\u8f91\u5668\n\n\nsed/awk/cut\u7b49Shell\u547d\u4ee4\n\n\n\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u6570\u636e\u5904\u7406\u5e93\u3002\n\n\n\n\n\u7136\u800c\uff0c\u7535\u5b50\u8868\u683c\u8f6f\u4ef6\u548c\u6587\u672c\u7f16\u8f91\u5668\u56fa\u7136\u5f3a\u5927\uff0c\u4f46\u4f9d\u8d56\u9f20\u6807\u64cd\u4f5c\uff0c\u4e0d\u9002\u5408\u6279\u91cf\u5904\u7406\uff1b\n\nsed/awk/cut\u7b49Shell\u547d\u4ee4\u4e3b\u8981\u7528\u4e8e\u901a\u7528\u7684\u8868\u683c\u6570\u636e\uff0c\u4e0d\u9002\u5408\u542b\u6709\u6807\u9898\u884c\u7684CSV\u683c\u5f0f\n\uff1b\n\n\u4e3a\u4e86\u4e00\u4e2a\u5c0f\u64cd\u4f5c\u5199Python/R\u811a\u672c\u4e5f\u6709\u70b9\u5c0f\u9898\u5927\u4f5c\uff0c\u4e14\u96be\u4ee5\u590d\u7528\n\u3002\n\n\n\u5f00\u53d1csvtk\u524d\u73b0\u6709\u7684\u5de5\u5177\u4e3b\u8981\u662fPython\u5199\u7684csvkit\uff0cRust\u5199\u7684xsv\uff0cC\u8bed\u8a00\u5199\u7684miller\uff0c\u90fd\u5404\u6709\u4f18\u52a3\u3002\n\u5f53\u65f6\u6211\u521a\u5f00\u53d1\u5b8cseqkit\uff0c\u6295\u6587\u7ae0\u8fc7\u7a0b\u4e2d\u65f6\u95f4\u5145\u8db3\uff0c\u4fbf\u60f3\u8d81\u70ed\u518d\u9020\u4e00\u4e2a\u8f6e\u5b50\u3002\n\n\n\u6240\u4ee5\u6211\u51b3\u5b9a\u5199\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\u6765\u6ee1\u8db3CSV/TSV\u683c\u5f0f\u7684\u5e38\u89c1\u64cd\u4f5c\uff0c\u8fd9\u5c31\u662fcsvtk\u4e86\u3002\n\n\n\u4ecb\u7ecd\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\n\n\u5de5\u5177\u7c7b\u578b: \u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5b50\u547d\u4ee4\u7ed3\u6784\n\n\n\u652f\u6301\u683c\u5f0f: CSV/TSV, plain/gzip-compressed\n\n\n\u7f16\u7a0b\u8bed\u8a00: Go\n\n\n\u652f\u6301\u5e73\u53f0: Linux, OS X\uff0c Windows \u7b49\n\n\n\u53d1\u5e03\u65b9\u5f0f: \u5355\u4e00\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4e0b\u8f7d\u5373\u7528\n\n\n\u53d1\u5e03\u5e73\u53f0: Github, Bioconda\n\n\n\u9879\u76ee\u4e3b\u9875: http://bioinf.shenwei.me/csvtk/\n\n\n\u5f00\u6e90\u5730\u5740: https://github.com/shenwei356/csvtk\n\n\n\n\n\u7279\u6027\n\n\n\n\n\u8de8\u5e73\u53f0\n\n\n\u8f7b\u91cf\uff0c\u65e0\u4efb\u4f55\u4f9d\u8d56\uff0c\u65e0\u9700\u7f16\u8bd1\u3001\u914d\u7f6e\uff0c\u4e0b\u8f7d\u5373\u7528\n\n\n\u5feb\u901f\n\n\n\u652f\u6301stdin\u548cgzip\u538b\u7f29\u7684\u8f93\u5165\u548c\u8f93\u51fa\u6587\u4ef6\uff0c\u4fbf\u4e8e\u6d41\u5904\u7406\n\n\n27\u4e2a\u5b50\u547d\u4ee4\u63d0\u4f9b\u591a\u79cd\u5b9e\u7528\u7684\u529f\u80fd\uff0c\u4e14\u80fd\u901a\u8fc7\u547d\u4ee4\u884c\u7ba1\u9053\u7ec4\u5408\n\n\n\u652f\u6301Bash\u81ea\u52a8\u8865\u5168\n\n\n\u652f\u6301\u7b80\u5355\u7684\u7ed8\u56fe\n\n\n\n\n\u529f\u80fd\n\n\n\u5728\u5f00\u53d1csvtk\u4e4b\u524d\u7684\u4e24\u4e09\u5e74\u95f4\uff0c\u6211\u5df2\u7ecf\u5199\u4e86\u51e0\u4e2a\u53ef\u4ee5\u590d\u7528\u7684Python/Perl\u811a\u672c\n\uff08https://github.com/shenwei356/datakit\uff09\n\uff0c\u5305\u62eccsv2tab\u3001csvtk_grep\u3001csv_join\u3001csv_melt\uff0cintersection\uff0cunique\u3002\n\u6240\u4ee5\u6211\u7684\u8ba1\u5212\u662f\u9996\u5148\u96c6\u6210\u8fd9\u4e9b\u5df2\u6709\u7684\u529f\u80fd\uff0c\u968f\u540e\u6839\u636e\u9700\u6c42\u8fdb\u884c\u6269\u5c55\u3002\n\n\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0ccsvtk\u5df2\u670927\u4e2a\u5b50\u547d\u4ee4\uff0c\u5206\u4e3a\u4ee5\u4e0b\u51e0\u5927\u7c7b\uff1a\n\n\n\n\n\u4fe1\u606f\n\n\nheaders\n \u76f4\u89c2\u6253\u5370\u6807\u9898\u884c\uff08\n\u64cd\u4f5c\u5217\u6570\u8f83\u591a\u7684CSV\u524d\u4f7f\u7528\u6700\u4f73\n\uff09\n\n\nstats\n \u57fa\u672c\u7edf\u8ba1\n\n\nstats2\n \u5bf9\u9009\u5b9a\u7684\u6570\u503c\u5217\u8fdb\u884c\u57fa\u672c\u7edf\u8ba1\n\n\n\n\n\n\n\u683c\u5f0f\u8f6c\u5316\n\n\npretty\n \u8f6c\u4e3a\u7f8e\u89c2\u3001\u53ef\u8bfb\u6027\u5f3a\u7684\u683c\u5f0f\uff08\n\u6700\u5e38\u7528\u547d\u4ee4\u4e4b\u4e00\n\uff09\n\n\ncsv2tab\n \u8f6cCSV\u4e3a\u5236\u8868\u7b26\u5206\u5272\u683c\u5f0f\uff08TSV\uff09\n\n\ntab2csv\n \u8f6cTSV\u4e3aCSV\n\n\nspace2tab\n \u8f6c\u7a7a\u683c\u5206\u5272\u683c\u5f0f\u4e3aTSV\n\n\ntranspose\n \u8f6c\u7f6eCSV/TSV\n\n\ncsv2md\n \u8f6cCSV/TSV\u4e3amakrdown\u683c\u5f0f\uff08\n\u5199\u6587\u6863\u5e38\u7528\n\uff09\n\n\n\n\n\n\n\u96c6\u5408\u64cd\u4f5c\n\n\nhead\n \u6253\u5370\u524dN\u6761\u8bb0\u5f55\n\n\nsample\n \u6309\u6bd4\u4f8b\u968f\u673a\u91c7\u6837\n\n\ncut\n \u9009\u62e9\u7279\u5b9a\u5217\uff0c\u652f\u6301\n\u6309\u5217\u6216\u5217\u540d\u8fdb\u884c\u57fa\u672c\u9009\u62e9\u3001\u8303\u56f4\u9009\u62e9\u3001\u6a21\u7cca\u9009\u62e9\u3001\u8d1f\u5411\u9009\u62e9\n\uff08\n\u6700\u5e38\u7528\u547d\u4ee4\u4e4b\u4e00\uff0c\u975e\u5e38\u5f3a\u5927\n\uff09\n\n\nuniq\n \u65e0\u987b\u6392\u5e8f\uff0c\u8fd4\u56de\u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u4f5c\u4e3akey\u7684\u552f\u4e00\u8bb0\u5f55\uff08\u597d\u7ed5\u3002\u3002\uff09\n\n\nfreq\n \u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u8fdb\u884c\u8ba1\u6570\uff08\n\u5e38\u7528\n\uff09\n\n\ninter\n \u591a\u4e2a\u6587\u4ef6\u95f4\u7684\u4ea4\u96c6\n\n\ngrep\n \u6307\u5b9a\uff08\u591a\uff09\u5217\u4e3aKey\u8fdb\u884c\u641c\u7d22\uff08\n\u6700\u5e38\u7528\u547d\u4ee4\u4e4b\u4e00\uff0c\u53ef\u6309\u6307\u5b9a\u5217\u641c\u7d22\n\uff09\n\n\nfilter\n \u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u7684\u6570\u503c\u8fdb\u884c\u8fc7\u6ee4\n\n\nfilter2\n \u7528\u7c7b\u4f3cawk\u7684\u6570\u503c/\u8868\u8fbe\u5f0f\uff0c\u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u7684\u6570\u503c\u8fdb\u884c\u8fc7\u6ee4\n\n\njoin\n \u5408\u5e76\u591a\u4e2a\u6587\u4ef6\uff08\n\u5e38\u7528\n\uff09\n\n\n\n\n\n\n\u7f16\u8f91\n\n\nrename\n \u76f4\u63a5\u91cd\u547d\u540d\u6307\u5b9a\uff08\u591a\uff09\u5217\u540d\uff08\n\u7b80\u5355\u800c\u5b9e\u7528\n\uff09\n\n\nrename2\n \u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u91cd\u547d\u540d\u6307\u5b9a\uff08\u591a\uff09\u5217\u540d\uff08\n\u7b80\u5355\u800c\u5b9e\u7528\n\uff09\n\n\nreplace\n \u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u6307\u5b9a\uff08\u591a\uff09\u5217\u8fdb\u884c\u66ff\u6362\u7f16\u8f91\uff08\n\u6700\u5e38\u7528\u547d\u4ee4\u4e4b\u4e00\uff0c\u53ef\u6309\u6307\u5b9a\u5217\u7f16\u8f91\n\uff09\n\n\nmutate\n \u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u57fa\u4e8e\u5df2\u6709\u5217\u521b\u5efa\u65b0\u7684\u4e00\u5217\uff08\n\u5e38\u7528\u4e8e\u751f\u6210\u591a\u5217\u6d4b\u8bd5\u6570\u636e\n\uff09\n\n\nmutate2\n \u7528\u7c7b\u4f3cawk\u7684\u6570\u503c/\u8868\u8fbe\u5f0f\uff0c\u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u57fa\u4e8e\u5df2\u6709\uff08\u591a\uff09\u5217\u521b\u5efa\u65b0\u7684\u4e00\u5217\uff08\n\u5e38\u7528\n\uff09\n\n\ngather\n \u7c7b\u4f3c\u4e8eR\u91cc\u9762dplyr\u5305\u7684gather\u65b9\u6cd5\n\n\n\n\n\n\n\u6392\u5e8f\n\n\nsort\n \u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u8fdb\u884c\u6392\u5e8f\n\n\n\n\n\n\n\u7ed8\u56fe\n\n\nplot\n \u57fa\u672c\u7ed8\u56fe\n\n\nplot hist\n histogram\n\n\nplot box\n boxplot\n\n\nplot line\n line plot and scatter plot\n\n\n\n\n\n\n\n\n\n\n\u5176\u5b83\n\n\nversion\n   \u7248\u672c\u4fe1\u606f\u548c\u68c0\u67e5\u65b0\u7248\u672c\n\n\ngenautocomplete\n \u751f\u6210\u652f\u6301Bash\u81ea\u52a8\u8865\u5168\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u91cd\u542fTerminal\u751f\u6548\u3002\n\n\n\n\n\n\n\n\n\u4f7f\u7528\n\n\n\n\n\u8f93\u5165\u6570\u636e\u8981\u6c42\u6bcf\u884c\u7684\u5217\u6570\u4e00\u81f4\uff0c\u7a7a\u884c\u4e5f\u4f1a\u62a5\u9519\n\n\ncsvtk\u9ed8\u8ba4\u8f93\u5165\u6570\u636e\u542b\u6709\u6807\u9898\u884c\uff0c\u5982\u6ca1\u6709\u8bf7\u5f00\u542f\u5168\u5c40\u53c2\u6570\n-H\n\n\ncsvtk\u9ed8\u8ba4\u8f93\u5165\u6570\u636e\u4e3aCSV\u683c\u5f0f\uff0c\u5982\u4e3aTSV\u8bf7\u5f00\u542f\u5168\u5c40\u53c2\u6570\n-t\n\n\n\u8f93\u5165\u6570\u636e\u5217\u540d\u6700\u597d\u552f\u4e00\u65e0\u91cd\u590d\n\n\n\u5982\u679cTSV\u4e2d\u5b58\u5728\u53cc\u5f15\u53f7\n\"\"\n\uff0c\u8bf7\u5f00\u542f\u5168\u5c40\u53c2\u6570\n-l\n\n\ncsvtk\u9ed8\u8ba4\u4ee5\n#\n\u5f00\u59cb\u7684\u4e3a\u6ce8\u91ca\u884c\uff0c\u82e5\u6807\u9898\u884c\u542b\n#\n\uff0c\u8bf7\u7ed9\u5168\u5c40\u53c2\u6570\n-C\n\u6307\u5b9a\u53e6\u4e00\u4e2a\u4e0d\u5e38\u89c1\u7684\u5b57\u7b26\uff08\u5982\n$\n\uff09\n\n\n\n\n\u4f8b\u5b50\n\n\n\u4ec5\u63d0\u4f9b\u5c11\u91cf\u4f8b\u5b50\uff0c\u66f4\u591a\u4f8b\u5b50\u8bf7\u770b\u4f7f\u7528\u624b\u518c http://bioinf.shenwei.me/csvtk/usage/ \u3002\n\n\n\n\n\n\n\u793a\u4f8b\u6570\u636e\n\n\n$ cat names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"\n\n\n\n\n\n\n\n\u589e\u5f3a\u53ef\u8bfb\u6027\n\n\n$ cat names.csv  | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123\n\n\n\n\n\n\n\n\u8f6c\u4e3amarkdown\n\n\n$ cat names.csv | csvtk csv2md\nid |first_name|last_name|username\n:--|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |123\n\n\n\n\u6548\u679c\n\n\n\n\n\n\n\n\nid\n\n\nfirst_name\n\n\nlast_name\n\n\nusername\n\n\n\n\n\n\n\n\n\n\n11\n\n\nRob\n\n\nPike\n\n\nrob\n\n\n\n\n\n\n2\n\n\nKen\n\n\nThompson\n\n\nken\n\n\n\n\n\n\n4\n\n\nRobert\n\n\nGriesemer\n\n\ngri\n\n\n\n\n\n\n1\n\n\nRobert\n\n\nThompson\n\n\nabc\n\n\n\n\n\n\nNA\n\n\nRobert\n\n\nAbel\n\n\n123\n\n\n\n\n\n\n\n\n\n\n\n\n\u7528\u5217\u6216\u5217\u540d\u6765\u9009\u62e9\u6307\u5b9a\u5217\uff0c\u53ef\u6539\u53d8\u5217\u7684\u987a\u5e8f\n\n\n$ cat names.csv | csvtk cut -f 3,1          | csvtk pretty\n$ cat names.csv | csvtk cut -f last_name,id | csvtk pretty\nlast_name   id\nPike        11\nThompson    2\nGriesemer   4\nThompson    1\nAbel        NA\n\n\n\n\n\n\n\n\u7528\u901a\u914d\u7b26\u9009\u62e9\u591a\u5217\n\n\n$ cat names.csv | csvtk cut -F -f '*name,id' | csvtk pretty\nfirst_name   last_name   username   id\nRob          Pike        rob        11\nKen          Thompson    ken        2\nRobert       Griesemer   gri        4\nRobert       Thompson    abc        1\nRobert       Abel        123        NA\n\n\n\n\n\n\n\n\u5220\u9664\u7b2c2\uff0c3\u5217\uff08\n\u4e0b\u5217\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u9009\u5b9a\u8303\u56f4\uff0c\u4f46-3\u5728\u524d,-2\u5728\u540e\n\uff09\n\n\n$ cat names.csv | csvtk cut -f -2,-3                  | csvtk pretty\n$ cat names.csv | csvtk cut -f -3--2                  | csvtk pretty\n$ cat names.csv | csvtk cut -f -first_name,-last_name | csvtk pretty\nid   username\n11   rob\n2    ken\n4    gri\n1    abc\nNA   123\n\n\n\n\n\n\n\n\u6309\u6307\u5b9a\u5217\u641c\u7d22\uff0c\n\u9ed8\u8ba4\u7cbe\u786e\u5339\u914d\n\n\n$ cat names.csv | csvtk grep -f id -p 1 | csvtk pretty\nid   first_name   last_name   username\n1    Robert       Thompson    abc\n\n\n\n\n\n\n\n\u6a21\u7cca\u641c\u7d22\uff08\u6b63\u5219\u8868\u8fbe\u5f0f\uff09\n\n\n$ cat names.csv | csvtk grep -f id -p 1 -r | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n1    Robert       Thompson    abc\n\n\n\n\n\n\n\n\u7528\u6587\u4ef6\u4f5c\u4e3a\u6a21\u5f0f\u6765\u6e90\n\n\n$ cat names.csv | csvtk grep -f id -P id-files.txt\n\n\n\n\n\n\n\n\u5bf9\u6307\u5b9a\u5217\u505a\u7b80\u5355\u66ff\u6362\n\n\n$ cat names.csv | csvtk replace -f id -p '(\\d+)' -r 'ID: $1' | csvtk pretty\nid       first_name   last_name   username\nID: 11   Rob          Pike        rob\nID: 2    Ken          Thompson    ken\nID: 4    Robert       Griesemer   gri\nID: 1    Robert       Thompson    abc\nNA       Robert       Abel        123\n\n\n\n\n\n\n\n\u7528key-value\u6587\u4ef6\u6765\u66ff\u6362\uff08seqkit\u548cbrename\u90fd\u652f\u6301\u7c7b\u4f3c\u64cd\u4f5c\uff09\n\n\n$ cat data.tsv\nname    id\nA       ID001\nB       ID002\nC       ID004\n\n$ cat alias.tsv\n001     Tom\n002     Bob\n003     Jim\n\n$ csvtk replace -t -f 2 -p \"ID(.+)\" -r \"N: {nr}, alias: {kv}\" -k alias.tsv data.tsv\nname    id\nA       N: 1, alias: Tom\nB       N: 2, alias: Bob\nC       N: 3, alias: 004\n\n\n\n\n\n\n\n\u5408\u5e76\u8868\u683c\uff0c\u9700\u8981\u5206\u522b\u6307\u5b9a\u5404\u6587\u4ef6\u4e2d\u7684key\u5217\uff1a\u9ed8\u8ba4\u5747\u4e3a\u7b2c\u4e00\u5217\uff1b\u82e5\u5217\uff08\u540d\uff09\u76f8\u540c\u63d0\u4f9b\u4e00\u4e2a\uff1b\u82e5\u4e0d\u540c\u7528\u5206\u53f7\u5206\u5272\n\n\n$ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ csvtk join -f 'username;username' --keep-unmatched names.csv phones.csv | csvtk pretty\nid   first_name   last_name   username   phone\n11   Rob          Pike        rob        12345\n2    Ken          Thompson    ken        22222\n4    Robert       Griesemer   gri        11111\n1    Robert       Thompson    abc\nNA   Robert       Abel        123", 
            "title": "\u4e2d\u6587\u4ecb\u7ecd"
        }, 
        {
            "location": "/chinese/#csvtk-csvtsv", 
            "text": "\u5982\u540c\u751f\u7269\u4fe1\u606f\u9886\u57df\u4e2d\u7684FASTA/Q\u683c\u5f0f\u4e00\u6837\uff0cCSV/TSV\u4f5c\u4e3a\u8ba1\u7b97\u673a\u3001\u6570\u636e\u79d1\u5b66\u548c\u751f\u7269\u4fe1\u606f\u7684\u57fa\u672c\u683c\u5f0f\uff0c\n\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\u3002\u5e38\u7528\u7684\u5904\u7406\u8f6f\u4ef6\u5305\u62ec\uff1a   \u4ee5\u5fae\u8f6fExcel\u4e3a\u4ee3\u8868\u7684\u7535\u5b50\u8868\u683c\u8f6f\u4ef6  Notepad++/SublimeText\u7b49\u6587\u672c\u7f16\u8f91\u5668  sed/awk/cut\u7b49Shell\u547d\u4ee4  \u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u6570\u636e\u5904\u7406\u5e93\u3002   \u7136\u800c\uff0c\u7535\u5b50\u8868\u683c\u8f6f\u4ef6\u548c\u6587\u672c\u7f16\u8f91\u5668\u56fa\u7136\u5f3a\u5927\uff0c\u4f46\u4f9d\u8d56\u9f20\u6807\u64cd\u4f5c\uff0c\u4e0d\u9002\u5408\u6279\u91cf\u5904\u7406\uff1b sed/awk/cut\u7b49Shell\u547d\u4ee4\u4e3b\u8981\u7528\u4e8e\u901a\u7528\u7684\u8868\u683c\u6570\u636e\uff0c\u4e0d\u9002\u5408\u542b\u6709\u6807\u9898\u884c\u7684CSV\u683c\u5f0f \uff1b \u4e3a\u4e86\u4e00\u4e2a\u5c0f\u64cd\u4f5c\u5199Python/R\u811a\u672c\u4e5f\u6709\u70b9\u5c0f\u9898\u5927\u4f5c\uff0c\u4e14\u96be\u4ee5\u590d\u7528 \u3002  \u5f00\u53d1csvtk\u524d\u73b0\u6709\u7684\u5de5\u5177\u4e3b\u8981\u662fPython\u5199\u7684csvkit\uff0cRust\u5199\u7684xsv\uff0cC\u8bed\u8a00\u5199\u7684miller\uff0c\u90fd\u5404\u6709\u4f18\u52a3\u3002\n\u5f53\u65f6\u6211\u521a\u5f00\u53d1\u5b8cseqkit\uff0c\u6295\u6587\u7ae0\u8fc7\u7a0b\u4e2d\u65f6\u95f4\u5145\u8db3\uff0c\u4fbf\u60f3\u8d81\u70ed\u518d\u9020\u4e00\u4e2a\u8f6e\u5b50\u3002  \u6240\u4ee5\u6211\u51b3\u5b9a\u5199\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\u6765\u6ee1\u8db3CSV/TSV\u683c\u5f0f\u7684\u5e38\u89c1\u64cd\u4f5c\uff0c\u8fd9\u5c31\u662fcsvtk\u4e86\u3002", 
            "title": "csvtk - \u8de8\u5e73\u53f0\u3001\u9ad8\u6548\u3001\u5b9e\u7528\u7684CSV/TSV\u547d\u4ee4\u884c\u5de5\u5177"
        }, 
        {
            "location": "/chinese/#_1", 
            "text": "\u57fa\u672c\u4fe1\u606f   \u5de5\u5177\u7c7b\u578b: \u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5b50\u547d\u4ee4\u7ed3\u6784  \u652f\u6301\u683c\u5f0f: CSV/TSV, plain/gzip-compressed  \u7f16\u7a0b\u8bed\u8a00: Go  \u652f\u6301\u5e73\u53f0: Linux, OS X\uff0c Windows \u7b49  \u53d1\u5e03\u65b9\u5f0f: \u5355\u4e00\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4e0b\u8f7d\u5373\u7528  \u53d1\u5e03\u5e73\u53f0: Github, Bioconda  \u9879\u76ee\u4e3b\u9875: http://bioinf.shenwei.me/csvtk/  \u5f00\u6e90\u5730\u5740: https://github.com/shenwei356/csvtk   \u7279\u6027   \u8de8\u5e73\u53f0  \u8f7b\u91cf\uff0c\u65e0\u4efb\u4f55\u4f9d\u8d56\uff0c\u65e0\u9700\u7f16\u8bd1\u3001\u914d\u7f6e\uff0c\u4e0b\u8f7d\u5373\u7528  \u5feb\u901f  \u652f\u6301stdin\u548cgzip\u538b\u7f29\u7684\u8f93\u5165\u548c\u8f93\u51fa\u6587\u4ef6\uff0c\u4fbf\u4e8e\u6d41\u5904\u7406  27\u4e2a\u5b50\u547d\u4ee4\u63d0\u4f9b\u591a\u79cd\u5b9e\u7528\u7684\u529f\u80fd\uff0c\u4e14\u80fd\u901a\u8fc7\u547d\u4ee4\u884c\u7ba1\u9053\u7ec4\u5408  \u652f\u6301Bash\u81ea\u52a8\u8865\u5168  \u652f\u6301\u7b80\u5355\u7684\u7ed8\u56fe", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/chinese/#_2", 
            "text": "\u5728\u5f00\u53d1csvtk\u4e4b\u524d\u7684\u4e24\u4e09\u5e74\u95f4\uff0c\u6211\u5df2\u7ecf\u5199\u4e86\u51e0\u4e2a\u53ef\u4ee5\u590d\u7528\u7684Python/Perl\u811a\u672c\n\uff08https://github.com/shenwei356/datakit\uff09\n\uff0c\u5305\u62eccsv2tab\u3001csvtk_grep\u3001csv_join\u3001csv_melt\uff0cintersection\uff0cunique\u3002\n\u6240\u4ee5\u6211\u7684\u8ba1\u5212\u662f\u9996\u5148\u96c6\u6210\u8fd9\u4e9b\u5df2\u6709\u7684\u529f\u80fd\uff0c\u968f\u540e\u6839\u636e\u9700\u6c42\u8fdb\u884c\u6269\u5c55\u3002  \u5230\u76ee\u524d\u4e3a\u6b62\uff0ccsvtk\u5df2\u670927\u4e2a\u5b50\u547d\u4ee4\uff0c\u5206\u4e3a\u4ee5\u4e0b\u51e0\u5927\u7c7b\uff1a   \u4fe1\u606f  headers  \u76f4\u89c2\u6253\u5370\u6807\u9898\u884c\uff08 \u64cd\u4f5c\u5217\u6570\u8f83\u591a\u7684CSV\u524d\u4f7f\u7528\u6700\u4f73 \uff09  stats  \u57fa\u672c\u7edf\u8ba1  stats2  \u5bf9\u9009\u5b9a\u7684\u6570\u503c\u5217\u8fdb\u884c\u57fa\u672c\u7edf\u8ba1    \u683c\u5f0f\u8f6c\u5316  pretty  \u8f6c\u4e3a\u7f8e\u89c2\u3001\u53ef\u8bfb\u6027\u5f3a\u7684\u683c\u5f0f\uff08 \u6700\u5e38\u7528\u547d\u4ee4\u4e4b\u4e00 \uff09  csv2tab  \u8f6cCSV\u4e3a\u5236\u8868\u7b26\u5206\u5272\u683c\u5f0f\uff08TSV\uff09  tab2csv  \u8f6cTSV\u4e3aCSV  space2tab  \u8f6c\u7a7a\u683c\u5206\u5272\u683c\u5f0f\u4e3aTSV  transpose  \u8f6c\u7f6eCSV/TSV  csv2md  \u8f6cCSV/TSV\u4e3amakrdown\u683c\u5f0f\uff08 \u5199\u6587\u6863\u5e38\u7528 \uff09    \u96c6\u5408\u64cd\u4f5c  head  \u6253\u5370\u524dN\u6761\u8bb0\u5f55  sample  \u6309\u6bd4\u4f8b\u968f\u673a\u91c7\u6837  cut  \u9009\u62e9\u7279\u5b9a\u5217\uff0c\u652f\u6301 \u6309\u5217\u6216\u5217\u540d\u8fdb\u884c\u57fa\u672c\u9009\u62e9\u3001\u8303\u56f4\u9009\u62e9\u3001\u6a21\u7cca\u9009\u62e9\u3001\u8d1f\u5411\u9009\u62e9 \uff08 \u6700\u5e38\u7528\u547d\u4ee4\u4e4b\u4e00\uff0c\u975e\u5e38\u5f3a\u5927 \uff09  uniq  \u65e0\u987b\u6392\u5e8f\uff0c\u8fd4\u56de\u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u4f5c\u4e3akey\u7684\u552f\u4e00\u8bb0\u5f55\uff08\u597d\u7ed5\u3002\u3002\uff09  freq  \u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u8fdb\u884c\u8ba1\u6570\uff08 \u5e38\u7528 \uff09  inter  \u591a\u4e2a\u6587\u4ef6\u95f4\u7684\u4ea4\u96c6  grep  \u6307\u5b9a\uff08\u591a\uff09\u5217\u4e3aKey\u8fdb\u884c\u641c\u7d22\uff08 \u6700\u5e38\u7528\u547d\u4ee4\u4e4b\u4e00\uff0c\u53ef\u6309\u6307\u5b9a\u5217\u641c\u7d22 \uff09  filter  \u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u7684\u6570\u503c\u8fdb\u884c\u8fc7\u6ee4  filter2  \u7528\u7c7b\u4f3cawk\u7684\u6570\u503c/\u8868\u8fbe\u5f0f\uff0c\u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u7684\u6570\u503c\u8fdb\u884c\u8fc7\u6ee4  join  \u5408\u5e76\u591a\u4e2a\u6587\u4ef6\uff08 \u5e38\u7528 \uff09    \u7f16\u8f91  rename  \u76f4\u63a5\u91cd\u547d\u540d\u6307\u5b9a\uff08\u591a\uff09\u5217\u540d\uff08 \u7b80\u5355\u800c\u5b9e\u7528 \uff09  rename2  \u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u91cd\u547d\u540d\u6307\u5b9a\uff08\u591a\uff09\u5217\u540d\uff08 \u7b80\u5355\u800c\u5b9e\u7528 \uff09  replace  \u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u6307\u5b9a\uff08\u591a\uff09\u5217\u8fdb\u884c\u66ff\u6362\u7f16\u8f91\uff08 \u6700\u5e38\u7528\u547d\u4ee4\u4e4b\u4e00\uff0c\u53ef\u6309\u6307\u5b9a\u5217\u7f16\u8f91 \uff09  mutate  \u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u57fa\u4e8e\u5df2\u6709\u5217\u521b\u5efa\u65b0\u7684\u4e00\u5217\uff08 \u5e38\u7528\u4e8e\u751f\u6210\u591a\u5217\u6d4b\u8bd5\u6570\u636e \uff09  mutate2  \u7528\u7c7b\u4f3cawk\u7684\u6570\u503c/\u8868\u8fbe\u5f0f\uff0c\u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u57fa\u4e8e\u5df2\u6709\uff08\u591a\uff09\u5217\u521b\u5efa\u65b0\u7684\u4e00\u5217\uff08 \u5e38\u7528 \uff09  gather  \u7c7b\u4f3c\u4e8eR\u91cc\u9762dplyr\u5305\u7684gather\u65b9\u6cd5    \u6392\u5e8f  sort  \u6309\u6307\u5b9a\uff08\u591a\uff09\u5217\u8fdb\u884c\u6392\u5e8f    \u7ed8\u56fe  plot  \u57fa\u672c\u7ed8\u56fe  plot hist  histogram  plot box  boxplot  plot line  line plot and scatter plot      \u5176\u5b83  version    \u7248\u672c\u4fe1\u606f\u548c\u68c0\u67e5\u65b0\u7248\u672c  genautocomplete  \u751f\u6210\u652f\u6301Bash\u81ea\u52a8\u8865\u5168\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u91cd\u542fTerminal\u751f\u6548\u3002", 
            "title": "\u529f\u80fd"
        }, 
        {
            "location": "/chinese/#_3", 
            "text": "\u8f93\u5165\u6570\u636e\u8981\u6c42\u6bcf\u884c\u7684\u5217\u6570\u4e00\u81f4\uff0c\u7a7a\u884c\u4e5f\u4f1a\u62a5\u9519  csvtk\u9ed8\u8ba4\u8f93\u5165\u6570\u636e\u542b\u6709\u6807\u9898\u884c\uff0c\u5982\u6ca1\u6709\u8bf7\u5f00\u542f\u5168\u5c40\u53c2\u6570 -H  csvtk\u9ed8\u8ba4\u8f93\u5165\u6570\u636e\u4e3aCSV\u683c\u5f0f\uff0c\u5982\u4e3aTSV\u8bf7\u5f00\u542f\u5168\u5c40\u53c2\u6570 -t  \u8f93\u5165\u6570\u636e\u5217\u540d\u6700\u597d\u552f\u4e00\u65e0\u91cd\u590d  \u5982\u679cTSV\u4e2d\u5b58\u5728\u53cc\u5f15\u53f7 \"\" \uff0c\u8bf7\u5f00\u542f\u5168\u5c40\u53c2\u6570 -l  csvtk\u9ed8\u8ba4\u4ee5 # \u5f00\u59cb\u7684\u4e3a\u6ce8\u91ca\u884c\uff0c\u82e5\u6807\u9898\u884c\u542b # \uff0c\u8bf7\u7ed9\u5168\u5c40\u53c2\u6570 -C \u6307\u5b9a\u53e6\u4e00\u4e2a\u4e0d\u5e38\u89c1\u7684\u5b57\u7b26\uff08\u5982 $ \uff09", 
            "title": "\u4f7f\u7528"
        }, 
        {
            "location": "/chinese/#_4", 
            "text": "\u4ec5\u63d0\u4f9b\u5c11\u91cf\u4f8b\u5b50\uff0c\u66f4\u591a\u4f8b\u5b50\u8bf7\u770b\u4f7f\u7528\u624b\u518c http://bioinf.shenwei.me/csvtk/usage/ \u3002    \u793a\u4f8b\u6570\u636e  $ cat names.csv\nid,first_name,last_name,username\n11,\"Rob\",\"Pike\",rob\n2,Ken,Thompson,ken\n4,\"Robert\",\"Griesemer\",\"gri\"\n1,\"Robert\",\"Thompson\",\"abc\"\nNA,\"Robert\",\"Abel\",\"123\"    \u589e\u5f3a\u53ef\u8bfb\u6027  $ cat names.csv  | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n2    Ken          Thompson    ken\n4    Robert       Griesemer   gri\n1    Robert       Thompson    abc\nNA   Robert       Abel        123    \u8f6c\u4e3amarkdown  $ cat names.csv | csvtk csv2md\nid |first_name|last_name|username\n:--|:---------|:--------|:-------\n11 |Rob       |Pike     |rob\n2  |Ken       |Thompson |ken\n4  |Robert    |Griesemer|gri\n1  |Robert    |Thompson |abc\nNA |Robert    |Abel     |123  \u6548\u679c     id  first_name  last_name  username      11  Rob  Pike  rob    2  Ken  Thompson  ken    4  Robert  Griesemer  gri    1  Robert  Thompson  abc    NA  Robert  Abel  123       \u7528\u5217\u6216\u5217\u540d\u6765\u9009\u62e9\u6307\u5b9a\u5217\uff0c\u53ef\u6539\u53d8\u5217\u7684\u987a\u5e8f  $ cat names.csv | csvtk cut -f 3,1          | csvtk pretty\n$ cat names.csv | csvtk cut -f last_name,id | csvtk pretty\nlast_name   id\nPike        11\nThompson    2\nGriesemer   4\nThompson    1\nAbel        NA    \u7528\u901a\u914d\u7b26\u9009\u62e9\u591a\u5217  $ cat names.csv | csvtk cut -F -f '*name,id' | csvtk pretty\nfirst_name   last_name   username   id\nRob          Pike        rob        11\nKen          Thompson    ken        2\nRobert       Griesemer   gri        4\nRobert       Thompson    abc        1\nRobert       Abel        123        NA    \u5220\u9664\u7b2c2\uff0c3\u5217\uff08 \u4e0b\u5217\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u9009\u5b9a\u8303\u56f4\uff0c\u4f46-3\u5728\u524d,-2\u5728\u540e \uff09  $ cat names.csv | csvtk cut -f -2,-3                  | csvtk pretty\n$ cat names.csv | csvtk cut -f -3--2                  | csvtk pretty\n$ cat names.csv | csvtk cut -f -first_name,-last_name | csvtk pretty\nid   username\n11   rob\n2    ken\n4    gri\n1    abc\nNA   123    \u6309\u6307\u5b9a\u5217\u641c\u7d22\uff0c \u9ed8\u8ba4\u7cbe\u786e\u5339\u914d  $ cat names.csv | csvtk grep -f id -p 1 | csvtk pretty\nid   first_name   last_name   username\n1    Robert       Thompson    abc    \u6a21\u7cca\u641c\u7d22\uff08\u6b63\u5219\u8868\u8fbe\u5f0f\uff09  $ cat names.csv | csvtk grep -f id -p 1 -r | csvtk pretty\nid   first_name   last_name   username\n11   Rob          Pike        rob\n1    Robert       Thompson    abc    \u7528\u6587\u4ef6\u4f5c\u4e3a\u6a21\u5f0f\u6765\u6e90  $ cat names.csv | csvtk grep -f id -P id-files.txt    \u5bf9\u6307\u5b9a\u5217\u505a\u7b80\u5355\u66ff\u6362  $ cat names.csv | csvtk replace -f id -p '(\\d+)' -r 'ID: $1' | csvtk pretty\nid       first_name   last_name   username\nID: 11   Rob          Pike        rob\nID: 2    Ken          Thompson    ken\nID: 4    Robert       Griesemer   gri\nID: 1    Robert       Thompson    abc\nNA       Robert       Abel        123    \u7528key-value\u6587\u4ef6\u6765\u66ff\u6362\uff08seqkit\u548cbrename\u90fd\u652f\u6301\u7c7b\u4f3c\u64cd\u4f5c\uff09  $ cat data.tsv\nname    id\nA       ID001\nB       ID002\nC       ID004\n\n$ cat alias.tsv\n001     Tom\n002     Bob\n003     Jim\n\n$ csvtk replace -t -f 2 -p \"ID(.+)\" -r \"N: {nr}, alias: {kv}\" -k alias.tsv data.tsv\nname    id\nA       N: 1, alias: Tom\nB       N: 2, alias: Bob\nC       N: 3, alias: 004    \u5408\u5e76\u8868\u683c\uff0c\u9700\u8981\u5206\u522b\u6307\u5b9a\u5404\u6587\u4ef6\u4e2d\u7684key\u5217\uff1a\u9ed8\u8ba4\u5747\u4e3a\u7b2c\u4e00\u5217\uff1b\u82e5\u5217\uff08\u540d\uff09\u76f8\u540c\u63d0\u4f9b\u4e00\u4e2a\uff1b\u82e5\u4e0d\u540c\u7528\u5206\u53f7\u5206\u5272  $ cat testdata/phones.csv\nusername,phone\ngri,11111\nrob,12345\nken,22222\nshenwei,999999\n\n$ csvtk join -f 'username;username' --keep-unmatched names.csv phones.csv | csvtk pretty\nid   first_name   last_name   username   phone\n11   Rob          Pike        rob        12345\n2    Ken          Thompson    ken        22222\n4    Robert       Griesemer   gri        11111\n1    Robert       Thompson    abc\nNA   Robert       Abel        123", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/bioinf/", 
            "text": "", 
            "title": "More tools"
        }
    ]
}